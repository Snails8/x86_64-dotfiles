{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://rainbow-csv/./rainbow_utils.js","webpack://rainbow-csv/./rbql_core/rbql-js/csv_utils.js","webpack://rainbow-csv/./rbql_core/rbql-js/rbql.js","webpack://rainbow-csv/./rbql_core/rbql-js/rbql_csv.js","webpack://rainbow-csv/external commonjs \"vscode\"","webpack://rainbow-csv/webpack/bootstrap","webpack://rainbow-csv/./extension.js"],"sourcesContent":["const os = require('os');\nconst fs = require('fs');\nconst path = require('path');\nconst rbql = require('./rbql_core/rbql-js/rbql.js');\n\nconst vscode = require('vscode');\n\nconst csv_utils = require('./rbql_core/rbql-js/csv_utils.js');\n\n\nfunction update_records(records, record_key, new_record) {\n    for (var i = 0; i < records.length; i++) {\n        if (records[i].length && records[i][0] == record_key) {\n            records[i] = new_record;\n            return;\n        }\n    }\n    records.push(new_record);\n}\n\n\nfunction try_read_index(index_path) {\n    var content = null;\n    try {\n        content = fs.readFileSync(index_path, 'utf-8');\n    } catch (e) {\n        return [];\n    }\n    var lines = content.split('\\n');\n    var records = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (!lines[i])\n            continue;\n        var record = lines[i].split('\\t');\n        records.push(record);\n    }\n    return records;\n}\n\n\nfunction write_index(records, index_path) {\n    var lines = [];\n    for (var i = 0; i < records.length; i++) {\n        lines.push(records[i].join('\\t'));\n    }\n    fs.writeFileSync(index_path, lines.join('\\n'));\n}\n\n\nfunction write_table_name(table_path, table_name) {\n    // TODO use VSCode \"globalState\" persistent storage instead with new RBQL version\n    let home_dir = os.homedir();\n    let index_path = path.join(home_dir, '.rbql_table_names');\n    let records = try_read_index(index_path);\n    let new_record = [table_name, table_path];\n    update_records(records, table_name, new_record);\n    if (records.length > 100) {\n        records.splice(0, 1);\n    }\n    write_index(records, index_path);\n}\n\n\nfunction read_table_path(table_name) {\n    let home_dir = os.homedir();\n    let index_path = path.join(home_dir, '.rbql_table_names');\n    let records = try_read_index(index_path);\n    for (let record of records) {\n        if (record.length > 1 && record[0] === table_name) {\n            return record[1];\n        }\n    }\n    if (fs.existsSync(table_name))\n        return table_name;\n    return null;\n}\n\n\nfunction read_header(table_path, encoding, process_header_line_callback) {\n    if (encoding == 'latin-1')\n        encoding = 'binary';\n    let readline = require('readline');\n    let input_reader = readline.createInterface({ input: fs.createReadStream(table_path, {encoding: encoding}) });\n    let closed = false;\n    input_reader.on('line', line => {\n        if (!closed) {\n            closed = true;\n            input_reader.close();\n            process_header_line_callback(line);\n        }\n    });\n}\n\n\nfunction get_header_line(document, comment_prefix) {\n    const num_lines = document.lineCount;\n    for (let lnum = 0; lnum < num_lines; ++lnum) {\n        const line_text = document.lineAt(lnum).text;\n        if (!comment_prefix || !line_text.startsWith(comment_prefix)) {\n            return line_text;\n        }\n    }\n    return null;\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let keys = Object.keys(inconsistent_records_info);\n    let entries = [];\n    for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let record_id = inconsistent_records_info[key];\n        entries.push([record_id, key]);\n    }\n    entries.sort(function(a, b) { return a[0] - b[0]; });\n    rbql.assert(entries.length > 1);\n    let [record_1, num_fields_1] = entries[0];\n    let [record_2, num_fields_2] = entries[1];\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_1} -> ${num_fields_1} fields, record ${record_2} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\n\nclass RbqlIOHandlingError extends Error {}\n\nclass VSCodeRecordIterator extends rbql.RBQLInputIterator {\n    constructor(document, delim, policy, has_header=false, comment_prefix=null, table_name='input', variable_prefix='a') {\n        // We could have done a hack here actually: convert the document to stream/buffer and then use the standard reader.\n        super();\n        this.document = document;\n        this.delim = delim;\n        this.policy = policy;\n        this.has_header = has_header;\n        this.comment_prefix = comment_prefix;\n        this.table_name = table_name;\n        this.variable_prefix = variable_prefix;\n        this.NR = 0; // Record number.\n        this.NL = 0; // Line number (NL != NR when the CSV file has comments or multiline fields).\n        this.fields_info = new Object();\n        this.first_defective_line = null;\n        this.first_record = this.get_first_record();\n    }\n\n    stop() {\n    }\n\n    get_first_record() {\n        let header_line = get_header_line(this.document, this.comment_prefix);\n        let first_record = csv_utils.smart_split(header_line, this.delim, this.policy, /*preserve_quotes_and_whitespaces=*/false)[0];\n        return first_record;\n    }\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        rbql.parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        rbql.parse_array_variables(query_text, this.variable_prefix, variable_map);\n        let header_line = get_header_line(this.document, this.comment_prefix);\n        let first_record = csv_utils.smart_split(header_line, this.delim, this.policy, /*preserve_quotes_and_whitespaces=*/false)[0];\n        if (this.has_header) {\n            rbql.parse_attribute_variables(query_text, this.variable_prefix, first_record, 'CSV header line', variable_map);\n            rbql.parse_dictionary_variables(query_text, this.variable_prefix, first_record, variable_map);\n        }\n        return variable_map;\n    }\n\n    async get_header() {\n        return this.has_header ? this.first_record : null;\n    }\n\n    get_line_rfc() {\n        // FIXME\n        //let rfc_line_buffer = 0;\n        //if (this.comment_prefix !== null && this.rfc_line_buffer.length == 0 && line.startsWith(this.comment_prefix))\n        //    return; // Just skip the line\n        //let match_list = line.match(/\"/g);\n        //let has_unbalanced_double_quote = match_list && match_list.length % 2 == 1;\n    }\n\n    get_line_simple() {\n        const num_lines = this.document.lineCount;\n        while (this.NL < num_lines) {\n            let line = this.document.lineAt(this.NL).text;\n            this.NL += 1;\n            if (this.comment_prefix === null || !line.startsWith(this.comment_prefix))\n                return line;\n        }\n        return null;\n    }\n\n    do_get_record() {\n        let line = (this.policy == 'quoted_rfc') ? this.get_line_rfc() : this.get_line_simple();\n        if (line === null)\n            return null;\n        let [record, warning] = csv_utils.smart_split(line, this.delim, this.policy, /*preserve_quotes_and_whitespaces=*/false);\n        if (warning) {\n            if (this.first_defective_line === null) {\n                this.first_defective_line = this.NL;\n                if (this.policy == 'quoted_rfc')\n                    this.handle_exception(new RbqlIOHandlingError(`Inconsistent double quote escaping in ${this.table_name} table at record ${this.NR}, line ${this.NL}`));\n            }\n        }\n        let num_fields = record.length;\n        if (!this.fields_info.hasOwnProperty(num_fields))\n            this.fields_info[num_fields] = this.NR;\n        return record;\n    }\n\n    async get_record() {\n        if (this.NR == 0 && this.has_header) {\n            this.do_get_record(); // Skip the header record.\n        }\n        this.NR += 1;\n        let record = this.do_get_record();\n        return record;\n    }\n\n    get_warnings() {\n        let result = [];\n        if (this.first_defective_line !== null)\n            result.push(`Inconsistent double quote escaping in ${this.table_name} table. E.g. at line ${this.first_defective_line}`);\n        if (Object.keys(this.fields_info).length > 1)\n            result.push(make_inconsistent_num_fields_warning('input', this.fields_info));\n        return result;\n    }\n}\n\n\nclass VSCodeWriter extends rbql.RBQLOutputWriter {\n    constructor(delim, policy, vscode_language_name) {\n        super();\n        this.delim = delim;\n        this.policy = policy;\n        this.vscode_language_name = vscode_language_name; // Completely determined by the (delim, policy) pair.\n        this.header_len = null;\n        this.null_in_output = false;\n        this.delim_in_simple_output = false;\n        this.output_lines = [];\n\n        if (policy == 'simple') {\n            this.polymorphic_join = this.simple_join;\n        } else if (policy == 'quoted') {\n            this.polymorphic_join = this.quoted_join;\n        } else if (policy == 'quoted_rfc') {\n            this.polymorphic_join = this.quoted_join_rfc;\n        } else if (policy == 'monocolumn') {\n            this.polymorphic_join = this.mono_join;\n        } else if (policy == 'whitespace') {\n            this.polymorphic_join = this.simple_join;\n        } else {\n            throw new RbqlIOHandlingError('Unknown output csv policy');\n        }\n    }\n\n    set_header(header) {\n        if (header !== null) {\n            this.header_len = header.length;\n            this.write(header);\n        }\n    }\n\n    quoted_join(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    quoted_join_rfc(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.rfc_quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    mono_join(fields) {\n        if (fields.length > 1) {\n            throw new RbqlIOHandlingError('Unable to use \"Monocolumn\" output format: some records have more than one field');\n        }\n        return fields[0];\n    };\n\n\n    simple_join(fields) {\n        var res = fields.join(this.delim);\n        if (fields.join('').indexOf(this.delim) != -1) {\n            this.delim_in_simple_output = true;\n        }\n        return res;\n    };\n\n\n    normalize_fields(out_fields) {\n        for (var i = 0; i < out_fields.length; i++) {\n            if (out_fields[i] == null) {\n                this.null_in_output = true;\n                out_fields[i] = '';\n            } else if (Array.isArray(out_fields[i])) {\n                this.normalize_fields(out_fields[i]);\n                out_fields[i] = out_fields[i].join(this.sub_array_delim);\n            }\n        }\n    };\n\n\n    write(fields) {\n        if (this.header_len !== null && fields.length != this.header_len)\n            throw new RbqlIOHandlingError(`Inconsistent number of columns in output header and the current record: ${this.header_len} != ${fields.length}`);\n        this.normalize_fields(fields);\n        this.output_lines.push(this.polymorphic_join(fields));\n        return true;\n    };\n\n    async finish() {\n        let output_doc_cfg = {content: this.output_lines.join('\\n'), language: this.vscode_language_name};\n        vscode.workspace.openTextDocument(output_doc_cfg).then(doc => vscode.window.showTextDocument(doc));\n    }\n\n    get_warnings() {\n        let result = [];\n        if (this.null_in_output)\n            result.push('null values in output were replaced by empty strings');\n        if (this.delim_in_simple_output)\n            result.push('Some output fields contain separator');\n        return result;\n    };\n}\n\n\nasync function query_vscode(query_text, input_document, input_delim, input_policy, output_delim, output_policy, output_vscode_language_name, output_warnings, with_headers, comment_prefix=null) {\n    let user_init_code = ''; // TODO find a way to have init code.\n    let join_tables_registry = null; // TODO find a way to have join registry.\n    let input_iterator = VSCodeRecordIterator(input_document, input_delim, input_policy, with_headers, comment_prefix);\n    let output_writer = VSCodeWriter(output_delim, output_policy, output_vscode_language_name);\n    await rbql.query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n}\n\n\nmodule.exports.write_table_name = write_table_name;\nmodule.exports.read_table_path = read_table_path;\nmodule.exports.read_header = read_header;\nmodule.exports.query_vscode = query_vscode;\nmodule.exports.get_header_line = get_header_line;\n","let field_regular_expression = '\"((?:[^\"]*\"\")*[^\"]*)\"';\nlet field_rgx = new RegExp('^' + field_regular_expression);\nlet field_rgx_external_whitespaces = new RegExp('^ *' + field_regular_expression + ' *');\n\n\n// TODO consider making this file (and rbql.js) both node and browser compatible: https://caolan.org/posts/writing_for_node_and_the_browser.html\n\n\nfunction split_lines(text) {\n    return text.split(/\\r\\n|\\r|\\n/);\n}\n\n\nfunction extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result) {\n    var warning = false;\n    let src_cur = src.substring(cidx);\n    let rgx = allow_external_whitespaces ? field_rgx_external_whitespaces : field_rgx;\n    let match_obj = rgx.exec(src_cur);\n    if (match_obj !== null) {\n        let match_end = match_obj[0].length;\n        if (cidx + match_end == src.length || src[cidx + match_end] == dlm) {\n            if (preserve_quotes_and_whitespaces) {\n                result.push(match_obj[0]);\n            } else {\n                result.push(match_obj[1].replace(/\"\"/g, '\"'));\n            }\n            return [cidx + match_end + 1, false];\n        }\n        warning = true;\n    }\n    var uidx = src.indexOf(dlm, cidx);\n    if (uidx == -1)\n        uidx = src.length;\n    var field = src.substring(cidx, uidx);\n    warning = warning || field.indexOf('\"') != -1;\n    result.push(field);\n    return [uidx + 1, warning];\n}\n\n\nfunction split_quoted_str(src, dlm, preserve_quotes_and_whitespaces=false) {\n    if (src.indexOf('\"') == -1) // Optimization for most common case\n        return [src.split(dlm), false];\n    var result = [];\n    var cidx = 0;\n    var warning = false;\n    let allow_external_whitespaces = dlm != ' ';\n    while (cidx < src.length) {\n        var extraction_report = extract_next_field(src, dlm, preserve_quotes_and_whitespaces, allow_external_whitespaces, cidx, result);\n        cidx = extraction_report[0];\n        warning = warning || extraction_report[1];\n    }\n    if (src.charAt(src.length - 1) == dlm)\n        result.push('');\n    return [result, warning];\n}\n\n\nfunction quote_field(src, delim) {\n    if (src.indexOf(delim) != -1 || src.indexOf('\"') != -1) {\n        var escaped = src.replace(/\"/g, '\"\"');\n        return `\"${escaped}\"`;\n    }\n    return src;\n}\n\n\nfunction rfc_quote_field(src, delim) {\n    if (src.indexOf(delim) != -1 || src.indexOf('\"') != -1 || src.indexOf('\\n') != -1 || src.indexOf('\\r') != -1) {\n        var escaped = src.replace(/\"/g, '\"\"');\n        return `\"${escaped}\"`;\n    }\n    return src;\n}\n\n\nfunction unquote_field(field) {\n    let rgx = new RegExp('^' + ' *' + field_regular_expression + ' *$');\n    let match_obj = rgx.exec(field);\n    if (match_obj !== null) {\n        return match_obj[1].replace(/\"\"/g, '\"');\n    }\n    return field;\n}\n\n\nfunction unquote_fields(fields) {\n    return fields.map(unquote_field);\n}\n\n\nfunction split_whitespace_separated_str(src, preserve_whitespaces=false) {\n    var rgxp = preserve_whitespaces ? new RegExp(' *[^ ]+ *', 'g') : new RegExp('[^ ]+', 'g');\n    let result = [];\n    let match_obj = null;\n    while((match_obj = rgxp.exec(src)) !== null) {\n        result.push(match_obj[0]);\n    }\n    if (preserve_whitespaces) {\n        for (let i = 0; i < result.length - 1; i++) {\n            result[i] = result[i].slice(0, -1);\n        }\n    }\n    return result;\n}\n\n\nfunction smart_split(src, dlm, policy, preserve_quotes_and_whitespaces) {\n    if (policy === 'simple')\n        return [src.split(dlm), false];\n    if (policy === 'whitespace')\n        return [split_whitespace_separated_str(src, preserve_quotes_and_whitespaces), false];\n    if (policy === 'monocolumn')\n        return [[src], false];\n    return split_quoted_str(src, dlm, preserve_quotes_and_whitespaces);\n}\n\n\n\nmodule.exports.split_quoted_str = split_quoted_str;\nmodule.exports.split_whitespace_separated_str = split_whitespace_separated_str;\nmodule.exports.smart_split = smart_split;\nmodule.exports.quote_field = quote_field;\nmodule.exports.rfc_quote_field = rfc_quote_field;\nmodule.exports.unquote_field = unquote_field;\nmodule.exports.unquote_fields = unquote_fields;\nmodule.exports.split_lines = split_lines;\n","(function(exports){\n// The magic line above is to make the module both browser and Node compatible, see https://stackoverflow.com/questions/3225251/how-can-i-share-code-between-node-js-and-the-browser\n\n// This module works with records only. It is CSV-agnostic.\n// Do not add CSV-related logic or variables/functions/objects like \"delim\", \"separator\" etc\n\n\nclass RbqlParsingError extends Error {}\nclass RbqlRuntimeError extends Error {}\nclass AssertionError extends Error {}\nclass RbqlIOHandlingError extends Error {}\n\n\nclass InternalBadFieldError extends Error {\n    constructor(bad_idx, ...params) {\n        super(...params);\n        this.bad_idx = bad_idx;\n    }\n}\n\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\n\nfunction replace_all(src, search, replacement) {\n    return src.split(search).join(replacement);\n}\n\n\nclass RBQLContext {\n    constructor(query_text, input_iterator, output_writer, user_init_code) {\n        this.query_text = query_text;\n        this.input_iterator = input_iterator;\n        this.writer = output_writer;\n        this.user_init_code = user_init_code;\n\n        this.unnest_list = null;\n        this.top_count = null;\n\n        this.like_regex_cache = new Map();\n\n        this.sort_key_expression = null;\n\n        this.aggregation_stage = 0;\n        this.aggregation_key_expression = null;\n        this.functional_aggregators = [];\n\n        this.join_map_impl = null;\n        this.join_map = null;\n        this.lhs_join_var_expression = null;\n\n        this.where_expression = null;\n\n        this.select_expression = null;\n\n        this.update_expressions = null;\n\n        this.variables_init_code = null;\n    }\n}\n\nvar query_context = null; // Needs to be global for MIN(), MAX(), etc functions\n\n\nconst wrong_aggregation_usage_error = 'Usage of RBQL aggregation functions inside JavaScript expressions is not allowed, see the docs';\nconst RBQL_VERSION = '0.21.0';\n\n\nfunction check_if_brackets_match(opening_bracket, closing_bracket) {\n    return (opening_bracket == '[' && closing_bracket == ']') || (opening_bracket == '(' && closing_bracket == ')') || (opening_bracket == '{' && closing_bracket == '}');\n}\n\n\nfunction parse_root_bracket_level_text_spans(select_expression) {\n    let text_spans = []; // parts of text separated by commas at the root parenthesis level\n    let last_pos = 0;\n    let bracket_stack = [];\n    for (let i = 0; i < select_expression.length; i++) {\n        let cur_char = select_expression[i];\n        if (cur_char == ',' && bracket_stack.length == 0) {\n            text_spans.push(select_expression.substring(last_pos, i));\n            last_pos = i + 1;\n        } else if (['[', '{', '('].indexOf(cur_char) != -1) {\n            bracket_stack.push(cur_char);\n        } else if ([']', '}', ')'].indexOf(cur_char) != -1) {\n            if (bracket_stack.length && check_if_brackets_match(bracket_stack[bracket_stack.length - 1], cur_char)) {\n                bracket_stack.pop();\n            } else {\n                throw new RbqlParsingError(`Unable to parse column headers in SELECT expression: No matching opening bracket for closing \"${cur_char}\"`);\n            }\n        }\n    }\n    if (bracket_stack.length) {\n        throw new RbqlParsingError(`Unable to parse column headers in SELECT expression: No matching closing bracket for opening \"${bracket_stack[0]}\"`);\n    }\n    text_spans.push(select_expression.substring(last_pos, select_expression.length));\n    text_spans = text_spans.map(span => span.trim());\n    return text_spans;\n}\n\n\nfunction unquote_string(quoted_str) {\n    // It's possible to use eval here to unqoute the quoted_column_name, but it would be a little barbaric, let's do it manually instead\n    if (!quoted_str || quoted_str.length < 2)\n        return null;\n    if (quoted_str[0] == \"'\" && quoted_str[quoted_str.length - 1] == \"'\") {\n        return quoted_str.substring(1, quoted_str.length - 1).replace(/\\\\'/g, \"'\").replace(/\\\\\\\\/g, \"\\\\\");\n    } else if (quoted_str[0] == '\"' && quoted_str[quoted_str.length - 1] == '\"') {\n        return quoted_str.substring(1, quoted_str.length - 1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, \"\\\\\");\n    } else {\n        return null;\n    }\n}\n\n\nfunction column_info_from_text_span(text_span, string_literals) {\n    // This function is a rough equivalent of \"column_info_from_node()\" function in python version of RBQL\n    text_span = text_span.trim();\n    let rbql_star_marker = '__RBQL_INTERNAL_STAR';\n    let simple_var_match = /^[_a-zA-Z][_a-zA-Z0-9]*$/.exec(text_span);\n    let attribute_match = /^([ab])\\.([_a-zA-Z][_a-zA-Z0-9]*)$/.exec(text_span);\n    let subscript_int_match = /^([ab])\\[([0-9]+)\\]$/.exec(text_span);\n    let subscript_str_match = /^([ab])\\[___RBQL_STRING_LITERAL([0-9]+)___\\]$/.exec(text_span);\n    if (simple_var_match !== null) {\n        if (text_span == rbql_star_marker)\n            return {table_name: null, column_index: null, column_name: null, is_star: true};\n        if (text_span.startsWith('___RBQL_STRING_LITERAL'))\n            return null;\n        let match = /^([ab])([0-9]+)$/.exec(text_span);\n        if (match !== null) {\n            return {table_name: match[1], column_index: parseInt(match[2]) - 1, column_name: null, is_star: false};\n        }\n        // Some examples for this branch: NR, NF\n        return {table_name: null, column_index: null, column_name: text_span, is_star: false};\n    } else if (attribute_match !== null) {\n        let table_name = attribute_match[1];\n        let column_name = attribute_match[2];\n        if (column_name == rbql_star_marker) {\n            return {table_name: table_name, column_index: null, column_name: null, is_star: true};\n        }\n        return {table_name: null, column_index: null, column_name: column_name, is_star: false};\n    } else if (subscript_int_match != null) {\n        let table_name = subscript_int_match[1];\n        let column_index = parseInt(subscript_int_match[2]) - 1;\n        return {table_name: table_name, column_index: column_index, column_name: null, is_star: false};\n    } else if (subscript_str_match != null) {\n        let table_name = subscript_str_match[1];\n        let replaced_string_literal_id = subscript_str_match[2];\n        if (replaced_string_literal_id < string_literals.length) {\n            let quoted_column_name = string_literals[replaced_string_literal_id];\n            let unquoted_column_name = unquote_string(quoted_column_name);\n            if (unquoted_column_name !== null && unquoted_column_name !== undefined) {\n                return {table_name: null, column_index: null, column_name: unquoted_column_name, is_star: false};\n            }\n        }\n    }\n    return null;\n}\n\n\nfunction adhoc_parse_select_expression_to_column_infos(select_expression, string_literals) {\n    // It is acceptable for the algorithm to provide null column name when it could be theorethically possible to deduce the name.\n    // I.e. this algorithm guarantees precision but doesn't guarantee completeness in all theorethically possible queries.\n    // Although the algorithm should be complete in all practical scenarios, i.e. it should be hard to come up with the query that doesn't produce complete set of column names.\n    // The null column name just means that the output column will be named as col{i}, so the failure to detect the proper column name can be tolerated.\n    // Specifically this function guarantees the following:\n    // 1. The number of column_infos is correct and will match the number of fields in each record in the output - otherwise the exception should be thrown\n    // 2. If column_info at pos j is not null, it is guaranteed to correctly represent that column name in the output\n    let text_spans = parse_root_bracket_level_text_spans(select_expression);\n    let column_infos = text_spans.map(ts => column_info_from_text_span(ts, string_literals));\n    return column_infos;\n}\n\n\nfunction stable_compare(a, b) {\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i])\n            return a[i] < b[i] ? -1 : 1;\n    }\n}\n\n\nfunction safe_get(record, idx) {\n    return idx < record.length ? record[idx] : null;\n}\n\n\nfunction safe_join_get(record, idx) {\n    if (idx < record.length) {\n        return record[idx];\n    }\n    throw new InternalBadFieldError(idx);\n}\n\n\nfunction safe_set(record, idx, value) {\n    if (idx < record.length) {\n        record[idx] = value;\n    } else {\n        throw new InternalBadFieldError(idx);\n    }\n}\n\n\nfunction regexp_escape(text) {\n    // From here: https://stackoverflow.com/a/6969486/2898283\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');  // $& means the whole matched text\n}\n\n\nfunction like_to_regex(pattern) {\n    let p = 0;\n    let i = 0;\n    let converted = '';\n    while (i < pattern.length) {\n        if (pattern.charAt(i) == '_' || pattern.charAt(i) == '%') {\n            converted += regexp_escape(pattern.substring(p, i));\n            p = i + 1;\n            if (pattern.charAt(i) == '_') {\n                converted += '.';\n            } else {\n                converted += '.*';\n            }\n        }\n        i += 1;\n    }\n    converted += regexp_escape(pattern.substring(p, i));\n    return '^' + converted + '$';\n}\n\n\nfunction like(text, pattern) {\n    let matcher = query_context.like_regex_cache.get(pattern);\n    if (matcher === undefined) {\n        matcher = new RegExp(like_to_regex(pattern));\n        query_context.like_regex_cache.set(pattern, matcher);\n    }\n    return matcher.test(text);\n}\nconst LIKE = like;\n\n\nclass RBQLAggregationToken {\n    constructor(marker_id, value) {\n        this.marker_id = marker_id;\n        this.value = value;\n    }\n\n    toString() {\n        throw new RbqlParsingError(wrong_aggregation_usage_error);\n    }\n}\n\n\nclass UnnestMarker {}\n\n\nfunction UNNEST(vals) {\n    if (query_context.unnest_list !== null) {\n        // Technically we can support multiple UNNEST's but the implementation/algorithm is more complex and just doesn't worth it\n        throw new RbqlParsingError('Only one UNNEST is allowed per query');\n    }\n    query_context.unnest_list = vals;\n    return new UnnestMarker();\n}\nconst unnest = UNNEST;\nconst Unnest = UNNEST;\nconst UNFOLD = UNNEST; // \"UNFOLD\" is deprecated, just for backward compatibility\n\n\nfunction parse_number(val) {\n    // We can do a more pedantic number test like `/^ *-{0,1}[0-9]+\\.{0,1}[0-9]* *$/.test(val)`, but  user will probably use just Number(val) or parseInt/parseFloat\n    let result = Number(val);\n    if (isNaN(result)) {\n        throw new RbqlRuntimeError(`Unable to convert value \"${val}\" to a number. MIN, MAX, SUM, AVG, MEDIAN and VARIANCE aggregate functions convert their string arguments to numeric values`);\n    }\n    return result;\n}\n\n\nclass MinAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, Math.min(cur_aggr, val));\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\n\nclass MaxAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, Math.max(cur_aggr, val));\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass SumAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, val);\n        } else {\n            this.stats.set(key, cur_aggr + val);\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass AvgAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val, 1]);\n        } else {\n            var cur_sum = cur_aggr[0];\n            var cur_cnt = cur_aggr[1];\n            this.stats.set(key, [cur_sum + val, cur_cnt + 1]);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        var cur_sum = cur_aggr[0];\n        var cur_cnt = cur_aggr[1];\n        var avg = cur_sum / cur_cnt;\n        return avg;\n    }\n}\n\n\nclass VarianceAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val, val * val, 1]);\n        } else {\n            var cur_sum = cur_aggr[0];\n            var cur_sum_sq = cur_aggr[1];\n            var cur_cnt = cur_aggr[2];\n            this.stats.set(key, [cur_sum + val, cur_sum_sq + val * val, cur_cnt + 1]);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        var cur_sum = cur_aggr[0];\n        var cur_sum_sq = cur_aggr[1];\n        var cur_cnt = cur_aggr[2];\n        var avg_val = cur_sum / cur_cnt;\n        var variance = cur_sum_sq / cur_cnt - avg_val * avg_val;\n        return variance;\n    }\n}\n\n\nclass MedianAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        val = parse_number(val);\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val]);\n        } else {\n            cur_aggr.push(val);\n        }\n    }\n\n    get_final(key) {\n        var cur_aggr = this.stats.get(key);\n        cur_aggr.sort(function(a, b) { return a - b; });\n        var m = Math.floor(cur_aggr.length / 2);\n        if (cur_aggr.length % 2) {\n            return cur_aggr[m];\n        } else {\n            return (cur_aggr[m - 1] + cur_aggr[m]) / 2.0;\n        }\n    }\n}\n\n\nclass CountAggregator {\n    constructor() {\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        var cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, 1);\n        } else {\n            this.stats.set(key, cur_aggr + 1);\n        }\n    }\n\n    get_final(key) {\n        return this.stats.get(key);\n    }\n}\n\n\nclass ArrayAggAggregator {\n    constructor(post_proc=null) {\n        this.post_proc = post_proc;\n        this.stats = new Map();\n    }\n\n    increment(key, val) {\n        let cur_aggr = this.stats.get(key);\n        if (cur_aggr === undefined) {\n            this.stats.set(key, [val]);\n        } else {\n            cur_aggr.push(val);\n        }\n    }\n\n    get_final(key) {\n        let cur_aggr = this.stats.get(key);\n        if (this.post_proc === null)\n            return cur_aggr;\n        return this.post_proc(cur_aggr);\n    }\n}\n\n\nclass ConstGroupVerifier {\n    constructor(output_index) {\n        this.output_index = output_index;\n        this.const_values = new Map();\n    }\n\n    increment(key, value) {\n        var old_value = this.const_values.get(key);\n        if (old_value === undefined) {\n            this.const_values.set(key, value);\n        } else if (old_value != value) {\n            throw new RbqlRuntimeError(`Invalid aggregate expression: non-constant values in output column ${this.output_index + 1}. E.g. \"${old_value}\" and \"${value}\"`);\n        }\n    }\n\n    get_final(key) {\n        return this.const_values.get(key);\n    }\n}\n\n\nfunction init_aggregator(generator_name, val, post_proc=null) {\n    query_context.aggregation_stage = 1;\n    var res = new RBQLAggregationToken(query_context.functional_aggregators.length, val);\n    if (post_proc === null) {\n        query_context.functional_aggregators.push(new generator_name());\n    } else {\n        query_context.functional_aggregators.push(new generator_name(post_proc));\n    }\n    return res;\n}\n\n\nfunction MIN(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MinAggregator, val) : val;\n}\nconst min = MIN;\nconst Min = MIN;\n\n\nfunction MAX(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MaxAggregator, val) : val;\n}\nconst max = MAX;\nconst Max = MAX;\n\nfunction COUNT(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(CountAggregator, 1) : 1;\n}\nconst count = COUNT;\nconst Count = COUNT;\n\nfunction SUM(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(SumAggregator, val) : val;\n}\nconst sum = SUM;\nconst Sum = SUM;\n\nfunction AVG(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(AvgAggregator, val) : val;\n}\nconst avg = AVG;\nconst Avg = AVG;\n\nfunction VARIANCE(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(VarianceAggregator, val) : val;\n}\nconst variance = VARIANCE;\nconst Variance = VARIANCE;\n\nfunction MEDIAN(val) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(MedianAggregator, val) : val;\n}\nconst median = MEDIAN;\nconst Median = MEDIAN;\n\nfunction ARRAY_AGG(val, post_proc=null) {\n    return query_context.aggregation_stage < 2 ? init_aggregator(ArrayAggAggregator, val, post_proc) : val;\n}\nconst array_agg = ARRAY_AGG;\nconst FOLD = ARRAY_AGG; // \"FOLD\" is deprecated, just for backward compatibility\n\n\nfunction add_to_set(dst_set, value) {\n    var len_before = dst_set.size;\n    dst_set.add(value);\n    return len_before != dst_set.size;\n}\n\n\nclass TopWriter {\n    constructor(subwriter, top_count) {\n        this.subwriter = subwriter;\n        this.NW = 0;\n        this.top_count = top_count;\n    }\n\n    write(record) {\n        if (this.top_count !== null && this.NW >= this.top_count)\n            return false;\n        this.subwriter.write(record);\n        this.NW += 1;\n        return true;\n    }\n\n    async finish() {\n        await this.subwriter.finish();\n    }\n}\n\n\nclass UniqWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.seen = new Set();\n    }\n\n    write(record) {\n        if (!add_to_set(this.seen, JSON.stringify(record)))\n            return true;\n        if (!this.subwriter.write(record))\n            return false;\n        return true;\n    }\n\n    async finish() {\n        await this.subwriter.finish();\n    }\n}\n\n\nclass UniqCountWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.records = new Map();\n    }\n\n    write(record) {\n        var key = JSON.stringify(record);\n        var old_val = this.records.get(key);\n        if (old_val) {\n            old_val[0] += 1;\n        } else {\n            this.records.set(key, [1, record]);\n        }\n        return true;\n    }\n\n    async finish() {\n        for (var [key, value] of this.records) {\n            let [count, record] = value;\n            record.unshift(count);\n            if (!this.subwriter.write(record))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass SortedWriter {\n    constructor(subwriter, reverse_sort) {\n        this.subwriter = subwriter;\n        this.reverse_sort = reverse_sort;\n        this.unsorted_entries = [];\n    }\n\n    write(stable_entry) {\n        this.unsorted_entries.push(stable_entry);\n        return true;\n    }\n\n    async finish() {\n        var unsorted_entries = this.unsorted_entries;\n        unsorted_entries.sort(stable_compare);\n        if (this.reverse_sort)\n            unsorted_entries.reverse();\n        for (var i = 0; i < unsorted_entries.length; i++) {\n            var entry = unsorted_entries[i];\n            if (!this.subwriter.write(entry[entry.length - 1]))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass AggregateWriter {\n    constructor(subwriter) {\n        this.subwriter = subwriter;\n        this.aggregators = [];\n        this.aggregation_keys = new Set();\n    }\n\n    async finish() {\n        var all_keys = Array.from(this.aggregation_keys);\n        all_keys.sort();\n        for (var i = 0; i < all_keys.length; i++) {\n            var key = all_keys[i];\n            var out_fields = [];\n            for (var ag of this.aggregators) {\n                out_fields.push(ag.get_final(key));\n            }\n            if (!this.subwriter.write(out_fields))\n                break;\n        }\n        await this.subwriter.finish();\n    }\n}\n\n\nclass InnerJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n    }\n\n    get_rhs(lhs_key) {\n        return this.join_map.get_join_records(lhs_key);\n    }\n}\n\n\nclass LeftJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n        this.null_record = [[null, join_map.max_record_len, Array(join_map.max_record_len).fill(null)]];\n    }\n\n    get_rhs(lhs_key) {\n        let result = this.join_map.get_join_records(lhs_key);\n        if (result.length == 0) {\n            return this.null_record;\n        }\n        return result;\n    }\n}\n\n\nclass StrictLeftJoiner {\n    constructor(join_map) {\n        this.join_map = join_map;\n    }\n\n    get_rhs(lhs_key) {\n        let result = this.join_map.get_join_records(lhs_key);\n        if (result.length != 1) {\n            throw new RbqlRuntimeError('In \"STRICT LEFT JOIN\" each key in A must have exactly one match in B. Bad A key: \"' + lhs_key + '\"');\n        }\n        return result;\n    }\n}\n\n\nfunction select_except(src, except_fields) {\n    let result = [];\n    for (let i = 0; i < src.length; i++) {\n        if (except_fields.indexOf(i) == -1)\n            result.push(src[i]);\n    }\n    return result;\n}\n\n\nfunction select_simple(sort_key, NR, out_fields) {\n    if (query_context.sort_key_expression !== null) {\n        var sort_entry = sort_key.concat([NR, out_fields]);\n        if (!query_context.writer.write(sort_entry))\n            return false;\n    } else {\n        if (!query_context.writer.write(out_fields))\n            return false;\n    }\n    return true;\n}\n\n\nfunction select_aggregated(key, transparent_values) {\n    if (key !== null) {\n        key = JSON.stringify(key);\n    }\n    if (query_context.aggregation_stage === 1) {\n        if (!(query_context.writer instanceof TopWriter)) {\n            throw new RbqlParsingError('\"ORDER BY\", \"UPDATE\" and \"DISTINCT\" keywords are not allowed in aggregate queries');\n        }\n        query_context.writer = new AggregateWriter(query_context.writer);\n        let num_aggregators_found = 0;\n        for (var i = 0; i < transparent_values.length; i++) {\n            var trans_value = transparent_values[i];\n            if (trans_value instanceof RBQLAggregationToken) {\n                query_context.writer.aggregators.push(query_context.functional_aggregators[trans_value.marker_id]);\n                query_context.writer.aggregators[query_context.writer.aggregators.length - 1].increment(key, trans_value.value);\n                num_aggregators_found += 1;\n            } else {\n                query_context.writer.aggregators.push(new ConstGroupVerifier(query_context.writer.aggregators.length));\n                query_context.writer.aggregators[query_context.writer.aggregators.length - 1].increment(key, trans_value);\n            }\n        }\n        if (num_aggregators_found != query_context.functional_aggregators.length) {\n            throw new RbqlParsingError(wrong_aggregation_usage_error);\n        }\n        query_context.aggregation_stage = 2;\n    } else {\n        for (var i = 0; i < transparent_values.length; i++) {\n            var trans_value = transparent_values[i];\n            query_context.writer.aggregators[i].increment(key, trans_value);\n        }\n    }\n    query_context.writer.aggregation_keys.add(key);\n}\n\n\nfunction select_unnested(sort_key, NR, folded_fields) {\n    let out_fields = folded_fields.slice();\n    let unnest_pos = folded_fields.findIndex(val => val instanceof UnnestMarker);\n    for (var i = 0; i < query_context.unnest_list.length; i++) {\n        out_fields[unnest_pos] = query_context.unnest_list[i];\n        if (!select_simple(sort_key, NR, out_fields.slice()))\n            return false;\n    }\n    return true;\n}\n\n\nconst PROCESS_SELECT_COMMON = `\n__RBQLMP__variables_init_code\nif (__RBQLMP__where_expression) {\n    let out_fields = __RBQLMP__select_expression;\n    if (query_context.aggregation_stage > 0) {\n        let key = __RBQLMP__aggregation_key_expression;\n        select_aggregated(key, out_fields);\n    } else {\n        let sort_key = [__RBQLMP__sort_key_expression];\n        if (query_context.unnest_list !== null) {\n            if (!select_unnested(sort_key, NR, out_fields))\n                stop_flag = true;\n        } else {\n            if (!select_simple(sort_key, NR, out_fields))\n                stop_flag = true;\n        }\n    }\n}\n`;\n\n\nconst PROCESS_SELECT_SIMPLE = `\nlet star_fields = record_a;\n__CODE__\n`;\n\n\nconst PROCESS_SELECT_JOIN = `\nlet join_matches = query_context.join_map.get_rhs(__RBQLMP__lhs_join_var_expression);\nfor (let join_match of join_matches) {\n    let [bNR, bNF, record_b] = join_match;\n    let star_fields = record_a.concat(record_b);\n    __CODE__\n    if (stop_flag)\n        break;\n}\n`;\n\n\nconst PROCESS_UPDATE_JOIN = `\nlet join_matches = query_context.join_map.get_rhs(__RBQLMP__lhs_join_var_expression);\nif (join_matches.length > 1)\n    throw new RbqlRuntimeError('More than one record in UPDATE query matched a key from the input table in the join table');\nlet record_b = null;\nlet bNR = null;\nlet bNF = null;\nif (join_matches.length == 1)\n    [bNR, bNF, record_b] = join_matches[0];\nlet up_fields = record_a;\n__RBQLMP__variables_init_code\nif (join_matches.length == 1 && (__RBQLMP__where_expression)) {\n    NU += 1;\n    __RBQLMP__update_expressions\n}\nif (!query_context.writer.write(up_fields))\n    stop_flag = true;\n`;\n\n\nconst PROCESS_UPDATE_SIMPLE = `\nlet up_fields = record_a;\n__RBQLMP__variables_init_code\nif (__RBQLMP__where_expression) {\n    NU += 1;\n    __RBQLMP__update_expressions\n}\nif (!query_context.writer.write(up_fields))\n    stop_flag = true;\n`;\n\n\nconst MAIN_LOOP_BODY = `\n__USER_INIT_CODE__\n\nlet NU = 0;\nlet NR = 0;\n\nlet stop_flag = false;\nwhile (!stop_flag) {\n    let record_a = await query_context.input_iterator.get_record();\n    if (record_a === null)\n        break;\n    NR += 1;\n    let NF = record_a.length;\n    query_context.unnest_list = null; // TODO optimize, don't need to set this every iteration\n    try {\n        __CODE__\n    } catch (e) {\n        if (e.constructor.name === 'InternalBadFieldError') {\n            throw new RbqlRuntimeError(\\`No \"a\\${e.bad_idx + 1}\" field at record \\${NR}\\`);\n        } else if (e.constructor.name === 'RbqlParsingError') {\n            throw(e);\n        } else {\n            throw new RbqlRuntimeError(\\`At record \\${NR}, Details: \\${e.message}\\`);\n        }\n    }\n}\n`;\n\n\nfunction embed_expression(parent_code, child_placeholder, child_expression) {\n    return replace_all(parent_code, child_placeholder, child_expression);\n}\n\n\nfunction embed_code(parent_code, child_placeholder, child_code) {\n    let parent_lines = parent_code.split('\\n');\n    let child_lines = child_code.split('\\n');\n    for (let i = 0; i < parent_lines.length; i++) {\n        let pos = parent_lines[i].indexOf(child_placeholder);\n        if (pos == -1)\n            continue;\n        assert(pos % 4 == 0);\n        let placeholder_indentation = parent_lines[i].substring(0, pos);\n        child_lines = child_lines.map(l => placeholder_indentation + l);\n        let result_lines = parent_lines.slice(0, i).concat(child_lines).concat(parent_lines.slice(i + 1));\n        return result_lines.join('\\n') + '\\n';\n    }\n    assert(false);\n}\n\n\nfunction generate_main_loop_code(query_context) {\n    let is_select_query = query_context.select_expression !== null;\n    let is_join_query = query_context.join_map !== null;\n    let where_expression = query_context.where_expression === null ? 'true' : query_context.where_expression;\n    let aggregation_key_expression = query_context.aggregation_key_expression === null ? 'null' : query_context.aggregation_key_expression;\n    let sort_key_expression = query_context.sort_key_expression === null ? 'null' : query_context.sort_key_expression;\n    let js_code = embed_code(MAIN_LOOP_BODY, '__USER_INIT_CODE__', query_context.user_init_code);\n    if (is_select_query) {\n        if (is_join_query) {\n            js_code = embed_code(embed_code(js_code, '__CODE__', PROCESS_SELECT_JOIN), '__CODE__', PROCESS_SELECT_COMMON);\n            js_code = embed_expression(js_code, '__RBQLMP__lhs_join_var_expression', query_context.lhs_join_var_expression);\n        } else {\n            js_code = embed_code(embed_code(js_code, '__CODE__', PROCESS_SELECT_SIMPLE), '__CODE__', PROCESS_SELECT_COMMON);\n        }\n        js_code = embed_code(js_code, '__RBQLMP__variables_init_code', query_context.variables_init_code);\n        js_code = embed_expression(js_code, '__RBQLMP__select_expression', query_context.select_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__where_expression', where_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__aggregation_key_expression', aggregation_key_expression);\n        js_code = embed_expression(js_code, '__RBQLMP__sort_key_expression', sort_key_expression);\n    } else {\n        if (is_join_query) {\n            js_code = embed_code(js_code, '__CODE__', PROCESS_UPDATE_JOIN);\n            js_code = embed_expression(js_code, '__RBQLMP__lhs_join_var_expression', query_context.lhs_join_var_expression);\n        } else {\n            js_code = embed_code(js_code, '__CODE__', PROCESS_UPDATE_SIMPLE);\n        }\n        js_code = embed_code(js_code, '__RBQLMP__variables_init_code', query_context.variables_init_code);\n        js_code = embed_code(js_code, '__RBQLMP__update_expressions', query_context.update_expressions);\n        js_code = embed_expression(js_code, '__RBQLMP__where_expression', where_expression);\n    }\n    return \"(async () => {\" + js_code + \"})()\";\n}\n\n\nasync function compile_and_run(query_context) {\n    let main_loop_body = generate_main_loop_code(query_context);\n    try {\n        let main_loop_promise = eval(main_loop_body);\n        await main_loop_promise;\n    } catch (e) {\n        if (e instanceof SyntaxError) {\n            // SyntaxError's from eval() function do not contain detailed explanation of what has caused the syntax error, so to guess what was wrong we can only use the original query\n            // v8 issue to fix eval: https://bugs.chromium.org/p/v8/issues/detail?id=2589\n            let lower_case_query = query_context.query_text.toLowerCase();\n            if (lower_case_query.indexOf(' having ') != -1)\n                throw new SyntaxError(e.message + \"\\nRBQL doesn't support \\\"HAVING\\\" keyword\");\n            if (lower_case_query.indexOf(' like ') != -1)\n                throw new SyntaxError(e.message + \"\\nRBQL doesn't support \\\"LIKE\\\" operator, use like() function instead e.g. ... WHERE like(a1, 'foo%bar') ... \"); // UT JSON\n            if (lower_case_query.indexOf(' from ') != -1)\n                throw new SyntaxError(e.message + \"\\nRBQL doesn't use \\\"FROM\\\" keyword, e.g. you can query 'SELECT *' without FROM\"); // UT JSON\n            if (e && e.message && String(e.message).toLowerCase().indexOf('unexpected identifier') != -1) {\n                if (lower_case_query.indexOf(' and ') != -1)\n                    throw new SyntaxError(e.message + \"\\nDid you use 'and' keyword in your query?\\nJavaScript backend doesn't support 'and' keyword, use '&&' operator instead!\");\n                if (lower_case_query.indexOf(' or ') != -1)\n                    throw new SyntaxError(e.message + \"\\nDid you use 'or' keyword in your query?\\nJavaScript backend doesn't support 'or' keyword, use '||' operator instead!\");\n            }\n        }\n        if (e && e.message && e.message.indexOf('Received an instance of RBQLAggregationToken') != -1)\n            throw new RbqlParsingError(wrong_aggregation_usage_error);\n        throw e;\n    }\n}\n\n\nconst GROUP_BY = 'GROUP BY';\nconst UPDATE = 'UPDATE';\nconst SELECT = 'SELECT';\nconst JOIN = 'JOIN';\nconst INNER_JOIN = 'INNER JOIN';\nconst LEFT_JOIN = 'LEFT JOIN';\nconst LEFT_OUTER_JOIN = 'LEFT OUTER JOIN';\nconst STRICT_LEFT_JOIN = 'STRICT LEFT JOIN';\nconst ORDER_BY = 'ORDER BY';\nconst WHERE = 'WHERE';\nconst LIMIT = 'LIMIT';\nconst EXCEPT = 'EXCEPT';\nconst WITH = 'WITH';\n\n\nfunction get_ambiguous_error_msg(variable_name) {\n    return `Ambiguous variable name: \"${variable_name}\" is present both in input and in join tables`;\n}\n\n\nfunction get_all_matches(regexp, text) {\n    var result = [];\n    let match_obj = null;\n    while((match_obj = regexp.exec(text)) !== null) {\n        result.push(match_obj);\n    }\n    return result;\n}\n\n\nfunction str_strip(src) {\n    return src.replace(/^ +| +$/g, '');\n}\n\n\nfunction strip_comments(cline) {\n    cline = cline.trim();\n    if (cline.startsWith('//'))\n        return '';\n    return cline;\n}\n\n\nfunction combine_string_literals(backend_expression, string_literals) {\n    for (var i = 0; i < string_literals.length; i++) {\n        backend_expression = replace_all(backend_expression, `___RBQL_STRING_LITERAL${i}___`, string_literals[i]);\n    }\n    return backend_expression;\n}\n\n\nfunction parse_basic_variables(query_text, prefix, dst_variables_map) {\n    assert(prefix == 'a' || prefix == 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}([1-9][0-9]*)(?:$|(?=[^_a-zA-Z0-9]))`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    for (let i = 0; i < matches.length; i++) {\n        let field_num = parseInt(matches[i][1]);\n        dst_variables_map[prefix + String(field_num)] = {initialize: true, index: field_num - 1};\n    }\n}\n\n\nfunction parse_array_variables(query_text, prefix, dst_variables_map) {\n    assert(prefix == 'a' || prefix == 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\[([1-9][0-9]*)\\\\]`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    for (let i = 0; i < matches.length; i++) {\n        let field_num = parseInt(matches[i][1]);\n        dst_variables_map[`${prefix}[${field_num}]`] = {initialize: true, index: field_num - 1};\n    }\n}\n\n\nfunction js_string_escape_column_name(column_name, quote_char) {\n    column_name = column_name.replace(/\\\\/g, '\\\\\\\\');\n    column_name = column_name.replace(/\\n/g, '\\\\n');\n    column_name = column_name.replace(/\\r/g, '\\\\r');\n    column_name = column_name.replace(/\\t/g, '\\\\t');\n    if (quote_char === \"'\")\n        return column_name.replace(/'/g, \"\\\\'\");\n    if (quote_char === '\"')\n        return column_name.replace(/\"/g, '\\\\\"');\n    assert(quote_char === \"`\");\n    return column_name.replace(/`/g, \"\\\\`\");\n}\n\n\nfunction query_probably_has_dictionary_variable(query_text, column_name) {\n    let rgx = new RegExp('[-a-zA-Z0-9_:;+=!.,()%^#@&* ]+', 'g');\n    let continuous_name_segments = get_all_matches(rgx, column_name);\n    for (let continuous_segment of continuous_name_segments) {\n        if (query_text.indexOf(continuous_segment) == -1)\n            return false;\n    }\n    return true;\n}\n\n\nfunction parse_dictionary_variables(query_text, prefix, column_names, dst_variables_map) {\n    // The purpose of this algorithm is to minimize number of variables in varibale_map to improve performance, ideally it should be only variables from the query\n\n    // FIXME to prevent typos in attribute names either use query-based variable parsing which can properly handle back-tick strings or wrap \"a\" and \"b\" variables with ES6 Proxies https://stackoverflow.com/a/25658975/2898283\n    assert(prefix === 'a' || prefix === 'b');\n    let dict_test_rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\[`);\n    if (query_text.search(dict_test_rgx) == -1)\n        return;\n    for (let i = 0; i < column_names.length; i++) {\n        let column_name = column_names[i];\n        if (query_probably_has_dictionary_variable(query_text, column_name)) {\n            let escaped_column_name = js_string_escape_column_name(column_name, '\"');\n            dst_variables_map[`${prefix}[\"${escaped_column_name}\"]`] = {initialize: true, index: i};\n            escaped_column_name = js_string_escape_column_name(column_name, \"'\");\n            dst_variables_map[`${prefix}['${escaped_column_name}']`] = {initialize: false, index: i};\n            escaped_column_name = js_string_escape_column_name(column_name, \"`\");\n            dst_variables_map[`${prefix}[\\`${escaped_column_name}\\`]`] = {initialize: false, index: i};\n        }\n    }\n}\n\n\nfunction parse_attribute_variables(query_text, prefix, column_names, column_names_source, dst_variables_map) {\n    // The purpose of this algorithm is to minimize number of variables in varibale_map to improve performance, ideally it should be only variables from the query\n\n    assert(prefix === 'a' || prefix === 'b');\n    let rgx = new RegExp(`(?:^|[^_a-zA-Z0-9])${prefix}\\\\.([_a-zA-Z][_a-zA-Z0-9]*)`, 'g');\n    let matches = get_all_matches(rgx, query_text);\n    let column_names_from_query = matches.map(v => v[1]);\n    for (let column_name of column_names_from_query) {\n        let zero_based_idx = column_names.indexOf(column_name);\n        if (zero_based_idx != -1) {\n            dst_variables_map[`${prefix}.${column_name}`] = {initialize: true, index: zero_based_idx};\n        } else {\n            throw new RbqlParsingError(`Unable to find column \"${column_name}\" in ${prefix == 'a' ? 'input' : 'join'} ${column_names_source}`);\n        }\n    }\n}\n\n\nfunction map_variables_directly(query_text, column_names, dst_variables_map) {\n    for (let i = 0; i < column_names.length; i++) {\n        let column_name = column_names[i];\n        if ( /^[_a-zA-Z][_a-zA-Z0-9]*$/.exec(column_name) === null)\n            throw new RbqlIOHandlingError(`Unable to use column name \"${column_name}\" as RBQL/JS variable`);\n        if (query_text.indexOf(column_name) != -1)\n            dst_variables_map[column_name] = {initialize: true, index: i};\n    }\n}\n\n\nfunction ensure_no_ambiguous_variables(query_text, input_column_names, join_column_names) {\n    let join_column_names_set = new Set(join_column_names);\n    for (let column_name of input_column_names) {\n        if (join_column_names_set.has(column_name) && query_text.indexOf(column_name) != -1) // False positive is tolerable here\n            throw new RbqlParsingError(get_ambiguous_error_msg(column_name));\n    }\n}\n\n\nfunction parse_join_expression(src) {\n    src = str_strip(src);\n    const invalid_join_syntax_error = 'Invalid join syntax. Valid syntax: <JOIN> /path/to/B/table on a... == b... [and a... == b... [and ... ]]';\n    let rgx = /^ *([^ ]+) +on +/i;\n    let match = rgx.exec(src);\n    if (match === null)\n        throw new RbqlParsingError(invalid_join_syntax_error);\n    let table_id = match[1];\n    src = src.substr(match[0].length);\n\n    let variable_pairs = [];\n    var pair_rgx = /^([^ =]+) *==? *([^ =]+)/;\n    var and_rgx = /^ +(and|&&) +/i;\n    while (true) {\n        match = pair_rgx.exec(src);\n        if (match === null)\n            throw new RbqlParsingError(invalid_join_syntax_error);\n        variable_pairs.push([match[1], match[2]]);\n        src = src.substr(match[0].length);\n        if (!src.length)\n            break;\n        match = and_rgx.exec(src);\n        if (match === null)\n            throw new RbqlParsingError(invalid_join_syntax_error);\n        src = src.substr(match[0].length);\n    }\n    return [table_id, variable_pairs];\n}\n\n\nfunction resolve_join_variables(input_variables_map, join_variables_map, variable_pairs, string_literals) {\n    let lhs_variables = [];\n    let rhs_indices = [];\n    const valid_join_syntax_msg = 'Valid JOIN syntax: <JOIN> /path/to/B/table on a... == b... [and a... == b... [and ... ]]';\n    for (let variable_pair of variable_pairs) {\n        let [join_var_1, join_var_2] = variable_pair;\n        join_var_1 = combine_string_literals(join_var_1, string_literals);\n        join_var_2 = combine_string_literals(join_var_2, string_literals);\n        if (input_variables_map.hasOwnProperty(join_var_1) && join_variables_map.hasOwnProperty(join_var_1))\n            throw new RbqlParsingError(get_ambiguous_error_msg(join_var_1));\n        if (input_variables_map.hasOwnProperty(join_var_2) && join_variables_map.hasOwnProperty(join_var_2))\n            throw new RbqlParsingError(get_ambiguous_error_msg(join_var_2));\n        if (input_variables_map.hasOwnProperty(join_var_2))\n            [join_var_1, join_var_2] = [join_var_2, join_var_1];\n\n        let [lhs_key_index, rhs_key_index] = [null, null];\n        if (['NR', 'a.NR', 'aNR'].indexOf(join_var_1) != -1) {\n            lhs_key_index = -1;\n        } else if (input_variables_map.hasOwnProperty(join_var_1)) {\n            lhs_key_index = input_variables_map[join_var_1].index;\n        } else {\n            throw new RbqlParsingError(`Unable to parse JOIN expression: Input table does not have field \"${join_var_1}\"\\n${valid_join_syntax_msg}`);\n        }\n\n        if (['b.NR', 'bNR'].indexOf(join_var_2) != -1) {\n            rhs_key_index = -1;\n        } else if (join_variables_map.hasOwnProperty(join_var_2)) {\n            rhs_key_index = join_variables_map[join_var_2].index;\n        } else {\n            throw new RbqlParsingError(`Unable to parse JOIN expression: Join table does not have field \"${join_var_2}\"\\n${valid_join_syntax_msg}`);\n        }\n\n        let lhs_join_var_expression = lhs_key_index == -1 ? 'NR' : `safe_join_get(record_a, ${lhs_key_index})`;\n        rhs_indices.push(rhs_key_index);\n        lhs_variables.push(lhs_join_var_expression);\n    }\n    return [lhs_variables, rhs_indices];\n}\n\n\nfunction generate_common_init_code(query_text, variable_prefix) {\n    assert(variable_prefix == 'a' || variable_prefix == 'b');\n    let result = [];\n    result.push(`${variable_prefix} = new Object();`);\n    let base_var = variable_prefix == 'a' ? 'NR' : 'bNR';\n    let attr_var = `${variable_prefix}.NR`;\n    if (query_text.indexOf(attr_var) != -1)\n        result.push(`${attr_var} = ${base_var};`);\n    if (variable_prefix == 'a' && query_text.indexOf('aNR') != -1)\n        result.push('aNR = NR;');\n    return result;\n}\n\n\nfunction generate_init_statements(query_text, variables_map, join_variables_map, indent) {\n    let code_lines = generate_common_init_code(query_text, 'a');\n    let simple_var_name_rgx = /^[_0-9a-zA-Z]+$/;\n    for (const [variable_name, var_info] of Object.entries(variables_map)) {\n        if (var_info.initialize) {\n            let variable_declaration_keyword = simple_var_name_rgx.exec(variable_name) ? 'var ' : '';\n            code_lines.push(`${variable_declaration_keyword}${variable_name} = safe_get(record_a, ${var_info.index});`);\n        }\n    }\n    if (join_variables_map) {\n        code_lines = code_lines.concat(generate_common_init_code(query_text, 'b'));\n        for (const [variable_name, var_info] of Object.entries(join_variables_map)) {\n            if (var_info.initialize) {\n                let variable_declaration_keyword = simple_var_name_rgx.exec(variable_name) ? 'var ' : '';\n                code_lines.push(`${variable_declaration_keyword}${variable_name} = record_b === null ? null : safe_get(record_b, ${var_info.index});`);\n            }\n        }\n    }\n    for (let i = 1; i < code_lines.length; i++) {\n        code_lines[i] = indent + code_lines[i];\n    }\n    return code_lines.join('\\n');\n}\n\n\nfunction replace_star_count(aggregate_expression) {\n    var rgx = /(^|,) *COUNT\\( *\\* *\\) *(?:$|(?=,))/ig;\n    var result = aggregate_expression.replace(rgx, '$1 COUNT(1)');\n    return str_strip(result);\n}\n\n\nfunction replace_star_vars(rbql_expression) {\n    let star_rgx = /(?:^|,) *(\\*|a\\.\\*|b\\.\\*) *(?=$|,)/g;\n    let matches = get_all_matches(star_rgx, rbql_expression);\n    let last_pos = 0;\n    let result = '';\n    for (let match of matches) {\n        let star_expression = match[1];\n        let replacement_expression = ']).concat(' + {'*': 'star_fields', 'a.*': 'record_a', 'b.*': 'record_b'}[star_expression] + ').concat([';\n        if (last_pos < match.index)\n            result += rbql_expression.substring(last_pos, match.index);\n        result += replacement_expression;\n        last_pos = match.index + match[0].length + 1; // Adding one to skip the lookahead comma\n    }\n    result += rbql_expression.substring(last_pos);\n    return result;\n}\n\n\nfunction replace_star_vars_for_header_parsing(rbql_expression) {\n    let star_rgx = /(?:(?<=^)|(?<=,)) *(\\*|a\\.\\*|b\\.\\*) *(?=$|,)/g;\n    let matches = get_all_matches(star_rgx, rbql_expression);\n    let last_pos = 0;\n    let result = '';\n    for (let match of matches) {\n        let star_expression = match[1];\n        let replacement_expression = {'*': '__RBQL_INTERNAL_STAR', 'a.*': 'a.__RBQL_INTERNAL_STAR', 'b.*': 'b.__RBQL_INTERNAL_STAR'}[star_expression];\n        if (last_pos < match.index)\n            result += rbql_expression.substring(last_pos, match.index);\n        result += replacement_expression;\n        last_pos = match.index + match[0].length;\n    }\n    result += rbql_expression.substring(last_pos);\n    return result;\n}\n\n\nfunction translate_update_expression(update_expression, input_variables_map, string_literals, indent) {\n    let first_assignment = str_strip(update_expression.split('=')[0]);\n    let first_assignment_error = `Unable to parse \"UPDATE\" expression: the expression must start with assignment, but \"${first_assignment}\" does not look like an assignable field name`;\n\n    let assignment_looking_rgx = /(?:^|,) *(a[.#a-zA-Z0-9\\[\\]_]*) *=(?=[^=])/g;\n    let update_expressions = [];\n    let pos = 0;\n    while (true) {\n        let match = assignment_looking_rgx.exec(update_expression);\n        if (update_expressions.length == 0 && (match === null || match.index != 0)) {\n            throw new RbqlParsingError(first_assignment_error);\n        }\n        if (match === null) {\n            update_expressions[update_expressions.length - 1] += str_strip(update_expression.substr(pos)) + ');';\n            break;\n        }\n        if (update_expressions.length)\n            update_expressions[update_expressions.length - 1] += str_strip(update_expression.substring(pos, match.index)) + ');';\n        let dst_var_name = combine_string_literals(str_strip(match[1]), string_literals);\n        if (!input_variables_map.hasOwnProperty(dst_var_name))\n            throw new RbqlParsingError(`Unable to parse \"UPDATE\" expression: Unknown field name: \"${dst_var_name}\"`);\n        let var_index = input_variables_map[dst_var_name].index;\n        let current_indent = update_expressions.length ? indent : '';\n        update_expressions.push(`${current_indent}safe_set(up_fields, ${var_index}, `);\n        pos = match.index + match[0].length;\n    }\n    return combine_string_literals(update_expressions.join('\\n'), string_literals);\n}\n\n\nfunction translate_select_expression(select_expression) {\n    let expression_without_stars = replace_star_count(select_expression);\n    let translated = str_strip(replace_star_vars(expression_without_stars));\n    let translated_for_header = str_strip(replace_star_vars_for_header_parsing(expression_without_stars));\n    if (!translated.length)\n        throw new RbqlParsingError('\"SELECT\" expression is empty');\n    return [`[].concat([${translated}])`, translated_for_header];\n}\n\n\nfunction separate_string_literals(rbql_expression) {\n    // The regex consists of 3 almost identicall parts, the only difference is quote type\n    var rgx = /('(\\\\(\\\\\\\\)*'|[^'])*')|(\"(\\\\(\\\\\\\\)*\"|[^\"])*\")|(`(\\\\(\\\\\\\\)*`|[^`])*`)/g;\n    var match_obj = null;\n    var format_parts = [];\n    var string_literals = [];\n    var idx_before = 0;\n    while((match_obj = rgx.exec(rbql_expression)) !== null) {\n        var literal_id = string_literals.length;\n        var string_literal = match_obj[0];\n        string_literals.push(string_literal);\n        var start_index = match_obj.index;\n        format_parts.push(rbql_expression.substring(idx_before, start_index));\n        format_parts.push(`___RBQL_STRING_LITERAL${literal_id}___`);\n        idx_before = rgx.lastIndex;\n    }\n    format_parts.push(rbql_expression.substring(idx_before));\n    var format_expression = format_parts.join('');\n    format_expression = format_expression.replace(/\\t/g, ' ');\n    return [format_expression, string_literals];\n}\n\n\nfunction locate_statements(rbql_expression) {\n    let statement_groups = [];\n    statement_groups.push([STRICT_LEFT_JOIN, LEFT_OUTER_JOIN, LEFT_JOIN, INNER_JOIN, JOIN]);\n    statement_groups.push([SELECT]);\n    statement_groups.push([ORDER_BY]);\n    statement_groups.push([WHERE]);\n    statement_groups.push([UPDATE]);\n    statement_groups.push([GROUP_BY]);\n    statement_groups.push([LIMIT]);\n    statement_groups.push([EXCEPT]);\n    var result = [];\n    for (var ig = 0; ig < statement_groups.length; ig++) {\n        for (var is = 0; is < statement_groups[ig].length; is++) {\n            var statement = statement_groups[ig][is];\n            var rgxp = new RegExp('(?:^| )' + replace_all(statement, ' ', ' *') + '(?= )', 'ig');\n            var matches = get_all_matches(rgxp, rbql_expression);\n            if (!matches.length)\n                continue;\n            if (matches.length > 1)\n                throw new RbqlParsingError(`More than one \"${statement}\" statements found`);\n            assert(matches.length == 1);\n            var match = matches[0];\n            var match_str = match[0];\n            result.push([match.index, match.index + match_str.length, statement]);\n            break; // Break to avoid matching a sub-statement from the same group e.g. \"INNER JOIN\" -> \"JOIN\"\n        }\n    }\n    result.sort(function(a, b) { return a[0] - b[0]; });\n    return result;\n}\n\n\nfunction separate_actions(rbql_expression) {\n    rbql_expression = str_strip(rbql_expression);\n    var result = {};\n    let with_match = /^(.*)  *[Ww][Ii][Tt][Hh] *\\(([a-z]{4,20})\\) *$/.exec(rbql_expression);\n    if (with_match !== null) {\n        rbql_expression = with_match[1];\n        result[WITH] = with_match[2];\n    }\n    var ordered_statements = locate_statements(rbql_expression);\n    for (var i = 0; i < ordered_statements.length; i++) {\n        var statement_start = ordered_statements[i][0];\n        var span_start = ordered_statements[i][1];\n        var statement = ordered_statements[i][2];\n        var span_end = i + 1 < ordered_statements.length ? ordered_statements[i + 1][0] : rbql_expression.length;\n        assert(statement_start < span_start);\n        assert(span_start <= span_end);\n        var span = rbql_expression.substring(span_start, span_end);\n        var statement_params = {};\n        if ([STRICT_LEFT_JOIN, LEFT_OUTER_JOIN, LEFT_JOIN, INNER_JOIN, JOIN].indexOf(statement) != -1) {\n            statement_params['join_subtype'] = statement;\n            statement = JOIN;\n        }\n\n        if (statement == UPDATE) {\n            if (statement_start != 0)\n                throw new RbqlParsingError('UPDATE keyword must be at the beginning of the query');\n            span = span.replace(/^ *SET/i, '');\n        }\n\n        if (statement == ORDER_BY) {\n            span = span.replace(/ ASC *$/i, '');\n            var new_span = span.replace(/ DESC *$/i, '');\n            if (new_span != span) {\n                span = new_span;\n                statement_params['reverse'] = true;\n            } else {\n                statement_params['reverse'] = false;\n            }\n        }\n\n        if (statement == SELECT) {\n            if (statement_start != 0)\n                throw new RbqlParsingError('SELECT keyword must be at the beginning of the query');\n            let match = /^ *TOP *([0-9]+) /i.exec(span);\n            if (match !== null) {\n                statement_params['top'] = parseInt(match[1]);\n                span = span.substr(match.index + match[0].length);\n            }\n            match = /^ *DISTINCT *(COUNT)? /i.exec(span);\n            if (match !== null) {\n                statement_params['distinct'] = true;\n                if (match[1]) {\n                    statement_params['distinct_count'] = true;\n                }\n                span = span.substr(match.index + match[0].length);\n            }\n        }\n        statement_params['text'] = str_strip(span);\n        result[statement] = statement_params;\n    }\n    if (!result.hasOwnProperty(SELECT) && !result.hasOwnProperty(UPDATE)) {\n        throw new RbqlParsingError('Query must contain either SELECT or UPDATE statement');\n    }\n    assert(result.hasOwnProperty(SELECT) != result.hasOwnProperty(UPDATE));\n    return result;\n}\n\n\nfunction find_top(rb_actions) {\n    if (rb_actions.hasOwnProperty(LIMIT)) {\n        var rgx = /^[0-9]+$/;\n        if (rgx.exec(rb_actions[LIMIT]['text']) === null) {\n            throw new RbqlParsingError('LIMIT keyword must be followed by an integer');\n        }\n        var result = parseInt(rb_actions[LIMIT]['text']);\n        return result;\n    }\n    var select_action = rb_actions[SELECT];\n    if (select_action && select_action.hasOwnProperty('top')) {\n        return select_action['top'];\n    }\n    return null;\n}\n\n\nfunction translate_except_expression(except_expression, input_variables_map, string_literals, input_header) {\n    let skip_vars = except_expression.split(',');\n    skip_vars = skip_vars.map(str_strip);\n    let skip_indices = [];\n    for (let var_name of skip_vars) {\n        var_name = combine_string_literals(var_name, string_literals);\n        if (!input_variables_map.hasOwnProperty(var_name))\n            throw new RbqlParsingError(`Unknown field in EXCEPT expression: \"${var_name}\"`);\n        skip_indices.push(input_variables_map[var_name].index);\n    }\n    skip_indices = skip_indices.sort((a, b) => a - b);\n    let output_header = input_header === null ? null : select_except(input_header, skip_indices);\n    let indices_str = skip_indices.join(',');\n    return [output_header, `select_except(record_a, [${indices_str}])`];\n}\n\n\nclass HashJoinMap {\n    constructor(record_iterator, key_indices) {\n        this.max_record_len = 0;\n        this.hash_map = new Map();\n        this.record_iterator = record_iterator;\n        this.nr = 0;\n        if (key_indices.length == 1) {\n            this.key_index = key_indices[0];\n            this.key_indices = null;\n            this.polymorphic_get_key = this.get_single_key;\n        } else {\n            this.key_index = null;\n            this.key_indices = key_indices;\n            this.polymorphic_get_key = this.get_multi_key;\n        }\n    }\n\n    get_single_key(nr, fields) {\n        if (this.key_index >= fields.length)\n            throw new RbqlRuntimeError(`No field with index ${this.key_index + 1} at record ${this.nr} in \"B\" table`);\n        return this.key_index === -1 ? this.nr : fields[this.key_index];\n    };\n\n    get_multi_key(nr, fields) {\n        let result = [];\n        for (let ki of this.key_indices) {\n            if (ki >= fields.length)\n                throw new RbqlRuntimeError(`No field with index ${ki + 1} at record ${this.nr} in \"B\" table`);\n            result.push(ki === -1 ? this.nr : fields[ki]);\n        }\n        return JSON.stringify(result);\n    };\n\n    async build() {\n        while (true) {\n            let fields = await this.record_iterator.get_record();\n            if (fields === null)\n                break;\n            this.nr += 1;\n            let nf = fields.length;\n            this.max_record_len = Math.max(this.max_record_len, nf);\n            let key = this.polymorphic_get_key(this.nr, fields);\n            let key_records = this.hash_map.get(key);\n            if (key_records === undefined) {\n                this.hash_map.set(key, [[this.nr, nf, fields]]);\n            } else {\n                key_records.push([this.nr, nf, fields]);\n            }\n        }\n    };\n\n    get_join_records(key) {\n        let result = this.hash_map.get(key);\n        if (result === undefined)\n            return [];\n        return result;\n    };\n\n    get_warnings() {\n        return this.record_iterator.get_warnings();\n    };\n}\n\n\nfunction cleanup_query(query_text) {\n    return query_text.split('\\n').map(strip_comments).filter(line => line.length).join(' ');\n}\n\n\nfunction remove_redundant_table_name(query_text) {\n    query_text = str_strip(query_text.replace(/ +from +a(?: +|$)/gi, ' '));\n    query_text = str_strip(query_text.replace(/^ *update +a +set /gi, 'update '));\n    return query_text;\n}\n\n\nfunction select_output_header(input_header, join_header, query_column_infos) {\n    if (input_header === null && join_header === null)\n        return null;\n    if (input_header === null)\n        input_header = [];\n    if (join_header === null)\n        join_header = [];\n    let output_header = [];\n    for (let qci of query_column_infos) {\n        // TODO refactor this and python version: extract this code into a function instead to always return something\n        if (qci === null) {\n            output_header.push('col' + (output_header.length + 1));\n        } else if (qci.is_star) {\n            if (qci.table_name === null) {\n                output_header = output_header.concat(input_header).concat(join_header);\n            } else if (qci.table_name === 'a') {\n                output_header = output_header.concat(input_header);\n            } else if (qci.table_name === 'b') {\n                output_header = output_header.concat(join_header);\n            }\n        } else if (qci.column_name !== null) {\n            output_header.push(qci.column_name);\n        } else if (qci.column_index !== null) {\n            if (qci.table_name == 'a' && qci.column_index < input_header.length) {\n                output_header.push(input_header[qci.column_index]);\n            } else if (qci.table_name == 'b' && qci.column_index < join_header.length) {\n                output_header.push(join_header[qci.column_index]);\n            } else {\n                output_header.push('col' + (output_header.length + 1));\n            }\n        } else { // Should never happen\n            output_header.push('col' + (output_header.length + 1));\n        }\n    }\n    return output_header;\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let keys = Object.keys(inconsistent_records_info);\n    let entries = [];\n    for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let record_id = inconsistent_records_info[key];\n        entries.push([record_id, key]);\n    }\n    entries.sort(function(a, b) { return a[0] - b[0]; });\n    assert(entries.length > 1);\n    let [record_1, num_fields_1] = entries[0];\n    let [record_2, num_fields_2] = entries[1];\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_1} -> ${num_fields_1} fields, record ${record_2} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\nclass RBQLInputIterator {\n    constructor(){}\n    stop() {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    async get_variables_map(query_text) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    async get_record() {\n        throw new Error(\"Unable to call the interface method\");\n    }\n    handle_query_modifier() {\n        return; // Reimplement if you need to handle a boolean query modifier that can be used like this: `SELECT * WITH (modifiername)`\n    }\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    }\n    async get_header() {\n        return null; // Reimplement if your class can provide input header\n    }\n}\n\n\nclass RBQLOutputWriter {\n    constructor(){}\n\n    write(fields) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n\n    async finish() {\n        // Reimplement if your class needs to do something on finish e.g. cleanup\n    };\n\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    };\n\n    set_header() {\n        return; // Reimplement if your class can handle output headers in a meaningful way\n    }\n}\n\n\nclass RBQLTableRegistry {\n    constructor(){}\n\n    get_iterator_by_table_id(table_id) {\n        throw new Error(\"Unable to call the interface method\");\n    }\n\n    get_warnings() {\n        return []; // Reimplement if your class can produce warnings\n    };\n}\n\n\nclass TableIterator extends RBQLInputIterator {\n    constructor(table, column_names=null, normalize_column_names=true, variable_prefix='a') {\n        super();\n        this.table = table;\n        this.column_names = column_names;\n        this.normalize_column_names = normalize_column_names;\n        this.variable_prefix = variable_prefix;\n        this.nr = 0;\n        this.fields_info = new Object();\n        this.stopped = false;\n    }\n\n\n    stop() {\n        this.stopped = true;\n    };\n\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        parse_array_variables(query_text, this.variable_prefix, variable_map);\n        if (this.column_names !== null) {\n            if (this.table.length && this.column_names.length != this.table[0].length)\n                throw new RbqlIOHandlingError('List of column names and table records have different lengths');\n            if (this.normalize_column_names) {\n                parse_dictionary_variables(query_text, this.variable_prefix, this.column_names, variable_map);\n                parse_attribute_variables(query_text, this.variable_prefix, this.column_names, 'column names list', variable_map);\n            } else {\n                map_variables_directly(query_text, this.column_names, variable_map);\n            }\n        }\n        return variable_map;\n    };\n\n\n    async get_record() {\n        if (this.stopped)\n            return null;\n        if (this.nr >= this.table.length)\n            return null;\n        let record = this.table[this.nr];\n        this.nr += 1;\n        let num_fields = record.length;\n        if (!this.fields_info.hasOwnProperty(num_fields))\n            this.fields_info[num_fields] = this.nr;\n        return record;\n    };\n\n    get_warnings() {\n        if (Object.keys(this.fields_info).length > 1)\n            return [make_inconsistent_num_fields_warning('input', this.fields_info)];\n        return [];\n    };\n\n    async get_header() {\n        return this.column_names;\n    }\n}\n\n\nclass TableWriter extends RBQLOutputWriter {\n    constructor(external_table) {\n        super();\n        this.table = external_table;\n        this.header = null;\n    }\n\n    write(fields) {\n        this.table.push(fields);\n        return true;\n    };\n\n    set_header(header) {\n        this.header = header;\n    }\n}\n\n\nclass SingleTableRegistry extends RBQLTableRegistry {\n    constructor(table, column_names=null, normalize_column_names=true, table_id='b') {\n        super();\n        this.table = table;\n        this.table_id = table_id;\n        this.column_names = column_names;\n        this.normalize_column_names = normalize_column_names;\n    }\n\n    get_iterator_by_table_id(table_id) {\n        if (table_id.toLowerCase() !== this.table_id)\n            throw new RbqlIOHandlingError(`Unable to find join table: \"${table_id}\"`);\n        return new TableIterator(this.table, this.column_names, this.normalize_column_names, 'b');\n    };\n}\n\n\nasync function shallow_parse_input_query(query_text, input_iterator, join_tables_registry, query_context) {\n    query_text = cleanup_query(query_text);\n    var [format_expression, string_literals] = separate_string_literals(query_text);\n    format_expression = remove_redundant_table_name(format_expression);\n\n    var rb_actions = separate_actions(format_expression);\n    if (rb_actions.hasOwnProperty(WITH)) {\n        input_iterator.handle_query_modifier(rb_actions[WITH]);\n    }\n    var input_variables_map = await input_iterator.get_variables_map(query_text);\n\n    if (rb_actions.hasOwnProperty(ORDER_BY) && rb_actions.hasOwnProperty(UPDATE))\n        throw new RbqlParsingError('\"ORDER BY\" is not allowed in \"UPDATE\" queries');\n\n    if (rb_actions.hasOwnProperty(GROUP_BY)) {\n        if (rb_actions.hasOwnProperty(ORDER_BY) || rb_actions.hasOwnProperty(UPDATE))\n            throw new RbqlParsingError('\"ORDER BY\", \"UPDATE\" and \"DISTINCT\" keywords are not allowed in aggregate queries');\n        query_context.aggregation_key_expression = '[' + combine_string_literals(rb_actions[GROUP_BY]['text'], string_literals) + ']';\n    }\n\n    let join_variables_map = null;\n    let join_header = null;\n    if (rb_actions.hasOwnProperty(JOIN)) {\n        var [rhs_table_id, variable_pairs] = parse_join_expression(rb_actions[JOIN]['text']);\n        if (join_tables_registry === null)\n            throw new RbqlParsingError('JOIN operations are not supported by the application');\n        let join_record_iterator = join_tables_registry.get_iterator_by_table_id(rhs_table_id);\n        if (!join_record_iterator)\n            throw new RbqlParsingError(`Unable to find join table: \"${rhs_table_id}\"`);\n        if (rb_actions.hasOwnProperty(WITH)) {\n            join_record_iterator.handle_query_modifier(rb_actions[WITH]);\n        }\n        join_variables_map = await join_record_iterator.get_variables_map(query_text);\n        join_header = await join_record_iterator.get_header();\n        let [lhs_variables, rhs_indices] = resolve_join_variables(input_variables_map, join_variables_map, variable_pairs, string_literals);\n        let sql_join_type = {'JOIN': InnerJoiner, 'INNER JOIN': InnerJoiner, 'LEFT JOIN': LeftJoiner, 'LEFT OUTER JOIN': LeftJoiner, 'STRICT LEFT JOIN': StrictLeftJoiner}[rb_actions[JOIN]['join_subtype']];\n        query_context.lhs_join_var_expression = lhs_variables.length == 1 ? lhs_variables[0] : 'JSON.stringify([' + lhs_variables.join(',') + '])';\n        query_context.join_map_impl = new HashJoinMap(join_record_iterator, rhs_indices);\n        await query_context.join_map_impl.build();\n        query_context.join_map = new sql_join_type(query_context.join_map_impl);\n    }\n\n    query_context.variables_init_code = combine_string_literals(generate_init_statements(format_expression, input_variables_map, join_variables_map, ' '.repeat(4)), string_literals);\n\n    if (rb_actions.hasOwnProperty(WHERE)) {\n        var where_expression = rb_actions[WHERE]['text'];\n        if (/[^><!=]=[^=]/.exec(where_expression))\n            throw new RbqlParsingError('Assignments \"=\" are not allowed in \"WHERE\" expressions. For equality test use \"==\" or \"===\"');\n        query_context.where_expression = combine_string_literals(where_expression, string_literals);\n    }\n\n    let input_header = await input_iterator.get_header();\n    if (rb_actions.hasOwnProperty(UPDATE)) {\n        var update_expression = translate_update_expression(rb_actions[UPDATE]['text'], input_variables_map, string_literals, ' '.repeat(8));\n        query_context.update_expressions = combine_string_literals(update_expression, string_literals);\n        query_context.writer.set_header(input_header);\n    }\n\n    if (rb_actions.hasOwnProperty(SELECT)) {\n        query_context.top_count = find_top(rb_actions);\n        if (rb_actions.hasOwnProperty(EXCEPT)) {\n            let [output_header, select_expression] = translate_except_expression(rb_actions[EXCEPT]['text'], input_variables_map, string_literals, input_header);\n            query_context.select_expression = select_expression;\n            query_context.writer.set_header(output_header);\n        } else {\n            let [select_expression, select_expression_for_ast] = translate_select_expression(rb_actions[SELECT]['text']);\n            query_context.select_expression = combine_string_literals(select_expression, string_literals);\n            let column_infos = adhoc_parse_select_expression_to_column_infos(select_expression_for_ast, string_literals);\n            let output_header = select_output_header(input_header, join_header, column_infos);\n            query_context.writer.set_header(output_header);\n        }\n\n        query_context.writer = new TopWriter(query_context.writer, query_context.top_count);\n        if (rb_actions[SELECT].hasOwnProperty('distinct_count')) {\n            query_context.writer = new UniqCountWriter(query_context.writer);\n        } else if (rb_actions[SELECT].hasOwnProperty('distinct')) {\n            query_context.writer = new UniqWriter(query_context.writer);\n        }\n    }\n\n    if (rb_actions.hasOwnProperty(ORDER_BY)) {\n        query_context.sort_key_expression = combine_string_literals(rb_actions[ORDER_BY]['text'], string_literals);\n        let reverse_sort = rb_actions[ORDER_BY]['reverse'];\n        query_context.writer = new SortedWriter(query_context.writer, reverse_sort);\n    }\n}\n\n\nasync function query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry=null, user_init_code='') {\n    query_context = new RBQLContext(query_text, input_iterator, output_writer, user_init_code);\n    await shallow_parse_input_query(query_text, input_iterator, join_tables_registry, query_context);\n    await compile_and_run(query_context);\n    await query_context.writer.finish();\n    output_warnings.push(...input_iterator.get_warnings());\n    if (query_context.join_map_impl)\n        output_warnings.push(...query_context.join_map_impl.get_warnings());\n    output_warnings.push(...output_writer.get_warnings());\n}\n\n\nasync function query_table(query_text, input_table, output_table, output_warnings, join_table=null, input_column_names=null, join_column_names=null, output_column_names=null, normalize_column_names=true, user_init_code='') {\n    if (!normalize_column_names && input_column_names !== null && join_column_names !== null)\n        ensure_no_ambiguous_variables(query_text, input_column_names, join_column_names);\n    let input_iterator = new TableIterator(input_table, input_column_names, normalize_column_names);\n    let output_writer = new TableWriter(output_table);\n    let join_tables_registry = join_table === null ? null : new SingleTableRegistry(join_table, join_column_names, normalize_column_names);\n    await query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    if (output_column_names !== null) {\n        assert(output_column_names.length == 0, '`output_column_names` param must be an empty list or null');\n        if (output_writer.header !== null) {\n            for (let column_name of output_writer.header) {\n                output_column_names.push(column_name);\n            }\n        }\n    }\n}\n\n\nfunction exception_to_error_info(e) {\n    let exceptions_type_map = {\n        'RbqlRuntimeError': 'query execution',\n        'RbqlParsingError': 'query parsing',\n        'SyntaxError': 'JS syntax error',\n        'RbqlIOHandlingError': 'IO handling'\n    };\n    let error_type = 'unexpected';\n    if (e.constructor && e.constructor.name && exceptions_type_map.hasOwnProperty(e.constructor.name)) {\n        error_type = exceptions_type_map[e.constructor.name];\n    }\n    let error_msg = e.hasOwnProperty('message') ? e.message : String(e);\n    return [error_type, error_msg];\n}\n\n\nexports.query = query;\nexports.query_table = query_table;\nexports.RBQLInputIterator = RBQLInputIterator;\nexports.RBQLOutputWriter = RBQLOutputWriter;\nexports.RBQLTableRegistry = RBQLTableRegistry;\n\nexports.version = RBQL_VERSION;\nexports.TableIterator = TableIterator;\nexports.TableWriter = TableWriter;\nexports.SingleTableRegistry = SingleTableRegistry;\nexports.exception_to_error_info = exception_to_error_info;\n\n\n// The functions below are exported just for unit tests, they are not part of the rbql API\n// TODO exports through the special unit_test proxy e.g. exports.unit_test.parse_basic_variables = parse_basic_variables;\nexports.parse_basic_variables = parse_basic_variables;\nexports.parse_array_variables = parse_array_variables;\nexports.parse_dictionary_variables = parse_dictionary_variables;\nexports.parse_attribute_variables = parse_attribute_variables;\nexports.get_all_matches = get_all_matches;\nexports.strip_comments = strip_comments;\nexports.separate_actions = separate_actions;\nexports.separate_string_literals = separate_string_literals;\nexports.combine_string_literals = combine_string_literals;\nexports.parse_join_expression = parse_join_expression;\nexports.resolve_join_variables = resolve_join_variables;\nexports.translate_update_expression = translate_update_expression;\nexports.translate_select_expression = translate_select_expression;\nexports.translate_except_expression = translate_except_expression;\nexports.like_to_regex = like_to_regex;\nexports.adhoc_parse_select_expression_to_column_infos = adhoc_parse_select_expression_to_column_infos;\nexports.replace_star_count = replace_star_count;\nexports.replace_star_vars_for_header_parsing = replace_star_vars_for_header_parsing;\nexports.select_output_header = select_output_header;\n\n}(typeof exports === 'undefined' ? this.rbql = {} : exports));\n","const fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst util = require('util');\n\nconst rbql = require('./rbql.js');\nconst csv_utils = require('./csv_utils.js');\n\n\nconst utf_decoding_error = 'Unable to decode input table as UTF-8. Use binary (latin-1) encoding instead';\n\n\nclass RbqlIOHandlingError extends Error {}\nclass AssertionError extends Error {}\n\n\n// TODO performance improvement: replace smart_split() with polymorphic_split()\n\n\nfunction assert(condition, message=null) {\n    if (!condition) {\n        if (!message) {\n            message = 'Assertion error';\n        }\n        throw new AssertionError(message);\n    }\n}\n\n\nfunction interpret_named_csv_format(format_name) {\n    format_name = format_name.toLowerCase();\n    if (format_name == 'monocolumn')\n        return ['', 'monocolumn'];\n    if (format_name == 'csv')\n        return [',', 'quoted'];\n    if (format_name == 'tsv')\n        return ['\\t', 'simple'];\n    throw new RbqlIOHandlingError(`Unknown format name: \"${format_name}\"`);\n}\n\n\n\nfunction is_ascii(str) {\n    return /^[\\x00-\\x7F]*$/.test(str);\n}\n\n\nfunction read_user_init_code(rbql_init_source_path) {\n    return fs.readFileSync(rbql_init_source_path, 'utf-8');\n}\n\n\nfunction remove_utf8_bom(line, assumed_source_encoding) {\n    if (assumed_source_encoding == 'binary' && line.length >= 3 && line.charCodeAt(0) === 0xEF && line.charCodeAt(1) === 0xBB && line.charCodeAt(2) === 0xBF) {\n        return line.substring(3);\n    }\n    if (assumed_source_encoding == 'utf-8' && line.length >= 1 && line.charCodeAt(0) === 0xFEFF) {\n        return line.substring(1);\n    }\n    return line;\n}\n\n\nfunction make_inconsistent_num_fields_warning(table_name, inconsistent_records_info) {\n    let keys = Object.keys(inconsistent_records_info);\n    let entries = [];\n    for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let record_id = inconsistent_records_info[key];\n        entries.push([record_id, key]);\n    }\n    entries.sort(function(a, b) { return a[0] - b[0]; });\n    assert(entries.length > 1);\n    let [record_1, num_fields_1] = entries[0];\n    let [record_2, num_fields_2] = entries[1];\n    let warn_msg = `Number of fields in \"${table_name}\" table is not consistent: `;\n    warn_msg += `e.g. record ${record_1} -> ${num_fields_1} fields, record ${record_2} -> ${num_fields_2} fields`;\n    return warn_msg;\n}\n\n\nfunction expanduser(filepath) {\n    if (filepath.charAt(0) === '~') {\n        return path.join(os.homedir(), filepath.slice(1));\n    }\n    return filepath;\n}\n\n\nfunction try_read_index(index_path) {\n    var content = null;\n    try {\n        content = fs.readFileSync(index_path, 'utf-8');\n    } catch (e) {\n        return [];\n    }\n    var lines = content.split('\\n');\n    var records = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (!lines[i])\n            continue;\n        var record = lines[i].split('\\t');\n        records.push(record);\n    }\n    return records;\n}\n\n\nfunction get_index_record(index_path, key) {\n    var records = try_read_index(index_path);\n    for (var i = 0; i < records.length; i++) {\n        if (records[i].length && records[i][0] == key) {\n            return records[i];\n        }\n    }\n    return null;\n}\n\n\nfunction find_table_path(main_table_dir, table_id) {\n    // If table_id is a relative path it could be relative either to the current directory or to the main table dir.\n    var candidate_path = expanduser(table_id);\n    if (fs.existsSync(candidate_path)) {\n        return candidate_path;\n    }\n    if (main_table_dir && !path.isAbsolute(candidate_path)) {\n        candidate_path = path.join(main_table_dir, candidate_path);\n        if (fs.existsSync(candidate_path)) {\n            return candidate_path;\n        }\n    }\n    let table_names_settings_path = path.join(os.homedir(), '.rbql_table_names');\n    var name_record = get_index_record(table_names_settings_path, table_id);\n    if (name_record && name_record.length > 1 && fs.existsSync(name_record[1])) {\n        return name_record[1];\n    }\n    return null;\n}\n\n\nclass RecordQueue {\n    // TODO compare performance with a linked list\n    constructor() {\n        this.push_stack = [];\n        this.pull_stack = [];\n    }\n\n    enqueue(record) {\n        this.push_stack.push(record);\n    }\n\n    dequeue() {\n        if (!this.pull_stack.length) {\n            if (!this.push_stack.length)\n                return null;\n            this.pull_stack = this.push_stack;\n            this.pull_stack.reverse();\n            this.push_stack = [];\n        }\n        return this.pull_stack.pop();\n    }\n}\n\n\nclass CSVRecordIterator extends rbql.RBQLInputIterator {\n    // CSVRecordIterator implements a typical async producer-consumer model with an internal buffer:\n    // get_record() - consumer\n    // stream.on('data') - producer\n    constructor(stream, csv_path, encoding, delim, policy, has_header=false, comment_prefix=null, table_name='input', variable_prefix='a') {\n        super();\n        this.stream = stream;\n        this.csv_path = csv_path;\n        assert((this.stream === null) != (this.csv_path === null));\n        this.encoding = encoding;\n        this.delim = delim;\n        this.policy = policy;\n\n        this.has_header = has_header;\n        this.first_record = null;\n        this.first_record_should_be_emitted = !has_header;\n        this.header_preread_complete = false;\n\n        this.table_name = table_name;\n        this.variable_prefix = variable_prefix;\n        this.comment_prefix = (comment_prefix !== null && comment_prefix.length) ? comment_prefix : null;\n\n        this.decoder = null;\n        if (encoding == 'utf-8' && this.csv_path === null) {\n            // Unfortunately util.TextDecoder has serious flaws:\n            // 1. It doesn't work in Node without ICU: https://nodejs.org/api/util.html#util_new_textdecoder_encoding_options\n            // 2. It is broken in Electron: https://github.com/electron/electron/issues/18733\n\n            // Technically we can implement our own custom streaming text decoder, using the 3 following technologies:\n            // 1. decode-encode validation method from https://stackoverflow.com/a/32279283/2898283\n            // 2. Scanning buffer chunks for non-continuation utf-8 bytes from the end of the buffer:\n            //    src_buffer -> (buffer_before, buffer_after) where buffer_after is very small(a couple of bytes) and buffer_before is large and ends with a non-continuation bytes\n            // 3. Internal buffer to store small tail part from the previous buffer\n            this.decoder = new util.TextDecoder(encoding, {fatal: true, stream: true});\n        }\n\n        this.input_exhausted = false;\n        this.started = false;\n\n        this.utf8_bom_removed = false; // BOM doesn't get automatically removed by the decoder when utf-8 file is treated as latin-1\n        this.first_defective_line = null;\n\n        this.fields_info = new Object();\n        this.NR = 0; // Record number\n        this.NL = 0; // Line number (NL != NR when the CSV file has comments or multiline fields)\n\n        this.rfc_line_buffer = [];\n\n        this.partially_decoded_line = '';\n        this.partially_decoded_line_ends_with_cr = false;\n\n        this.resolve_current_record = null;\n        this.reject_current_record = null;\n        this.current_exception = null;\n\n        this.produced_records_queue = new RecordQueue();\n\n        this.process_line_polymorphic = policy == 'quoted_rfc' ? this.process_partial_rfc_record_line : this.process_record_line;\n    }\n\n\n    handle_query_modifier(modifier) {\n        // For `... WITH (header) ...` syntax\n        if (['header', 'headers'].indexOf(modifier) != -1) {\n            this.has_header = true;\n            this.first_record_should_be_emitted = false;\n        }\n        if (['noheader', 'noheaders'].indexOf(modifier) != -1) {\n            this.has_header = false;\n            this.first_record_should_be_emitted = true;\n        }\n    }\n\n\n    handle_exception(exception) {\n        if (this.reject_current_record) {\n            let reject = this.reject_current_record;\n            this.reject_current_record = null;\n            this.resolve_current_record = null;\n            reject(exception);\n        } else {\n            this.current_exception = exception;\n        }\n\n    }\n\n    async preread_first_record() {\n        if (this.header_preread_complete)\n            return;\n        this.first_record = await this.get_record();\n        this.header_preread_complete = true; // We must set header_preread_complete to true after calling get_record(), because get_record() uses it internally.\n        if (this.first_record === null) {\n            return;\n        }\n        if (this.stream)\n            this.stream.pause();\n        this.first_record = this.first_record.slice();\n    };\n\n\n    async get_variables_map(query_text) {\n        let variable_map = new Object();\n        rbql.parse_basic_variables(query_text, this.variable_prefix, variable_map);\n        rbql.parse_array_variables(query_text, this.variable_prefix, variable_map);\n\n        await this.preread_first_record();\n        if (this.has_header && this.first_record) {\n            rbql.parse_attribute_variables(query_text, this.variable_prefix, this.first_record, 'CSV header line', variable_map);\n            rbql.parse_dictionary_variables(query_text, this.variable_prefix, this.first_record, variable_map);\n        }\n        return variable_map;\n    };\n\n    async get_header() {\n        await this.preread_first_record();\n        return this.has_header ? this.first_record : null;\n    }\n\n\n    try_resolve_next_record() {\n        if (this.resolve_current_record === null)\n            return;\n\n        let record = null;\n        if (this.first_record_should_be_emitted && this.header_preread_complete) {\n            this.first_record_should_be_emitted = false;\n            record = this.first_record;\n        } else {\n            record = this.produced_records_queue.dequeue();\n        }\n\n        if (record === null && !this.input_exhausted)\n            return;\n        let resolve = this.resolve_current_record;\n        this.resolve_current_record = null;\n        this.reject_current_record = null;\n        resolve(record);\n    };\n\n\n    async get_record() {\n        if (!this.started)\n            await this.start();\n        if (this.stream && this.stream.isPaused())\n            this.stream.resume();\n\n        let parent_iterator = this;\n        let current_record_promise = new Promise(function(resolve, reject) {\n            parent_iterator.resolve_current_record = resolve;\n            parent_iterator.reject_current_record = reject;\n        });\n        if (this.current_exception) {\n            this.reject_current_record(this.current_exception);\n        }\n        this.try_resolve_next_record();\n        return current_record_promise;\n    };\n\n\n    async get_all_records(num_records=null) {\n        let records = [];\n        while (true) {\n            let record = await this.get_record();\n            if (record === null)\n                break;\n            records.push(record);\n            if (num_records && records.length >= num_records) {\n                this.stop();\n                break;\n            }\n        }\n        return records;\n    };\n\n\n    process_record_line(line) {\n        if (this.comment_prefix !== null && line.startsWith(this.comment_prefix))\n            return; // Just skip the line\n        this.NR += 1;\n        var [record, warning] = csv_utils.smart_split(line, this.delim, this.policy, false);\n        if (warning) {\n            if (this.first_defective_line === null) {\n                this.first_defective_line = this.NL;\n                if (this.policy == 'quoted_rfc')\n                    this.handle_exception(new RbqlIOHandlingError(`Inconsistent double quote escaping in ${this.table_name} table at record ${this.NR}, line ${this.NL}`));\n            }\n        }\n        let num_fields = record.length;\n        if (!this.fields_info.hasOwnProperty(num_fields))\n            this.fields_info[num_fields] = this.NR;\n        this.produced_records_queue.enqueue(record);\n        this.try_resolve_next_record();\n    };\n\n\n    process_partial_rfc_record_line(line) {\n        if (this.comment_prefix !== null && this.rfc_line_buffer.length == 0 && line.startsWith(this.comment_prefix))\n            return; // Just skip the line\n        let match_list = line.match(/\"/g);\n        let has_unbalanced_double_quote = match_list && match_list.length % 2 == 1;\n        if (this.rfc_line_buffer.length == 0 && !has_unbalanced_double_quote) {\n            this.process_record_line(line);\n        } else if (this.rfc_line_buffer.length == 0 && has_unbalanced_double_quote) {\n            this.rfc_line_buffer.push(line);\n        } else if (!has_unbalanced_double_quote) {\n            this.rfc_line_buffer.push(line);\n        } else {\n            this.rfc_line_buffer.push(line);\n            let multiline_row = this.rfc_line_buffer.join('\\n');\n            this.rfc_line_buffer = [];\n            this.process_record_line(multiline_row);\n        }\n    };\n\n\n    process_line(line) {\n        this.NL += 1;\n        if (this.NL === 1) {\n            var clean_line = remove_utf8_bom(line, this.encoding);\n            if (clean_line != line) {\n                line = clean_line;\n                this.utf8_bom_removed = true;\n            }\n        }\n        this.process_line_polymorphic(line);\n    };\n\n\n    process_data_stream_chunk(data_chunk) {\n        let decoded_string = null;\n        if (this.decoder) {\n            try {\n                decoded_string = this.decoder.decode(data_chunk);\n            } catch (e) {\n                if (e instanceof TypeError) {\n                    this.handle_exception(new RbqlIOHandlingError(utf_decoding_error));\n                } else {\n                    this.handle_exception(e);\n                }\n                return;\n            }\n        } else {\n            decoded_string = data_chunk.toString(this.encoding);\n        }\n        let line_starts_with_lf = decoded_string.length && decoded_string[0] == '\\n';\n        let first_line_index = line_starts_with_lf && this.partially_decoded_line_ends_with_cr ? 1 : 0;\n        this.partially_decoded_line_ends_with_cr = decoded_string.length && decoded_string[decoded_string.length - 1] == '\\r';\n        let lines = csv_utils.split_lines(decoded_string);\n        lines[0] = this.partially_decoded_line + lines[0];\n        assert(first_line_index == 0 || lines[0].length == 0);\n        this.partially_decoded_line = lines.pop();\n        for (let i = first_line_index; i < lines.length; i++) {\n            this.process_line(lines[i]);\n        }\n    };\n\n\n    process_data_bulk(data_chunk) {\n        let decoded_string = data_chunk.toString(this.encoding);\n        if (this.encoding == 'utf-8') {\n            // Using hacky comparison method from here: https://stackoverflow.com/a/32279283/2898283\n            // TODO get rid of this once TextDecoder is really fixed or when alternative method of reliable decoding appears\n            let control_buffer = Buffer.from(decoded_string, 'utf-8');\n            if (Buffer.compare(data_chunk, control_buffer) != 0) {\n                this.handle_exception(new RbqlIOHandlingError(utf_decoding_error));\n                return;\n            }\n        }\n        let lines = csv_utils.split_lines(decoded_string);\n        if (lines.length && lines[lines.length - 1].length == 0)\n            lines.pop();\n        for (let i = 0; i < lines.length; i++) {\n            this.process_line(lines[i]);\n        }\n        if (this.rfc_line_buffer.length > 0) {\n            this.process_record_line(this.rfc_line_buffer.join('\\n'));\n        }\n        this.input_exhausted = true;\n        this.try_resolve_next_record(); // Should be a NOOP here?\n    }\n\n\n    process_data_stream_end() {\n        this.input_exhausted = true;\n        if (this.partially_decoded_line.length) {\n            let last_line = this.partially_decoded_line;\n            this.partially_decoded_line = '';\n            this.process_line(last_line);\n        }\n        if (this.rfc_line_buffer.length > 0) {\n            this.process_record_line(this.rfc_line_buffer.join('\\n'));\n        }\n        this.try_resolve_next_record();\n    };\n\n\n    stop() {\n        if (this.stream)\n            this.stream.destroy(); // TODO consider using pause() instead\n    };\n\n\n    async start() {\n        if (this.started)\n            return;\n        this.started = true;\n        if (this.stream) {\n            this.stream.on('data', (data_chunk) => { this.process_data_stream_chunk(data_chunk); });\n            this.stream.on('end', () => { this.process_data_stream_end(); });\n        } else {\n            let parent_iterator = this;\n            return new Promise(function(resolve, reject) {\n                fs.readFile(parent_iterator.csv_path, (err, data_chunk) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        parent_iterator.process_data_bulk(data_chunk);\n                        resolve();\n                    }\n                });\n            });\n        }\n    };\n\n\n    get_warnings() {\n        let result = [];\n        if (this.first_defective_line !== null)\n            result.push(`Inconsistent double quote escaping in ${this.table_name} table. E.g. at line ${this.first_defective_line}`);\n        if (this.utf8_bom_removed)\n            result.push(`UTF-8 Byte Order Mark (BOM) was found and skipped in ${this.table_name} table`);\n        if (Object.keys(this.fields_info).length > 1)\n            result.push(make_inconsistent_num_fields_warning('input', this.fields_info));\n        return result;\n    };\n}\n\n\nclass CSVWriter extends rbql.RBQLOutputWriter {\n    constructor(stream, close_stream_on_finish, encoding, delim, policy, line_separator='\\n') {\n        super();\n        this.stream = stream;\n        this.encoding = encoding;\n        if (encoding)\n            this.stream.setDefaultEncoding(encoding);\n        this.delim = delim;\n        this.policy = policy;\n        this.line_separator = line_separator;\n        this.sub_array_delim = delim == '|' ? ';' : '|';\n\n        this.close_stream_on_finish = close_stream_on_finish;\n\n        this.null_in_output = false;\n        this.delim_in_simple_output = false;\n        this.header_len = null;\n\n        if (policy == 'simple') {\n            this.polymorphic_join = this.simple_join;\n        } else if (policy == 'quoted') {\n            this.polymorphic_join = this.quoted_join;\n        } else if (policy == 'quoted_rfc') {\n            this.polymorphic_join = this.quoted_join_rfc;\n        } else if (policy == 'monocolumn') {\n            this.polymorphic_join = this.mono_join;\n        } else if (policy == 'whitespace') {\n            this.polymorphic_join = this.simple_join;\n        } else {\n            throw new RbqlIOHandlingError('Unknown output csv policy');\n        }\n    }\n\n\n    set_header(header) {\n        if (header !== null) {\n            this.header_len = header.length;\n            this.write(header);\n        }\n    }\n\n\n    quoted_join(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    quoted_join_rfc(fields) {\n        let delim = this.delim;\n        var quoted_fields = fields.map(function(v) { return csv_utils.rfc_quote_field(String(v), delim); });\n        return quoted_fields.join(this.delim);\n    };\n\n\n    mono_join(fields) {\n        if (fields.length > 1) {\n            throw new RbqlIOHandlingError('Unable to use \"Monocolumn\" output format: some records have more than one field');\n        }\n        return fields[0];\n    };\n\n\n    simple_join(fields) {\n        var res = fields.join(this.delim);\n        if (fields.join('').indexOf(this.delim) != -1) {\n            this.delim_in_simple_output = true;\n        }\n        return res;\n    };\n\n\n    normalize_fields(out_fields) {\n        for (var i = 0; i < out_fields.length; i++) {\n            if (out_fields[i] == null) {\n                this.null_in_output = true;\n                out_fields[i] = '';\n            } else if (Array.isArray(out_fields[i])) {\n                this.normalize_fields(out_fields[i]);\n                out_fields[i] = out_fields[i].join(this.sub_array_delim);\n            }\n        }\n    };\n\n\n    write(fields) {\n        if (this.header_len !== null && fields.length != this.header_len)\n            throw new RbqlIOHandlingError(`Inconsistent number of columns in output header and the current record: ${this.header_len} != ${fields.length}`);\n        this.normalize_fields(fields);\n        this.stream.write(this.polymorphic_join(fields));\n        this.stream.write(this.line_separator);\n        return true;\n    };\n\n\n    _write_all(table) {\n        for (let i = 0; i < table.length; i++) {\n            this.write(table[i]);\n        }\n    };\n\n\n    async finish() {\n        let close_stream_on_finish = this.close_stream_on_finish;\n        let output_stream = this.stream;\n        let output_encoding = this.encoding;\n        let finish_promise = new Promise(function(resolve, reject) {\n            if (close_stream_on_finish) {\n                output_stream.end('', output_encoding, () => { resolve(); });\n            } else {\n                setTimeout(() => { resolve(); }, 0);\n            }\n        });\n        return finish_promise;\n    };\n\n\n    get_warnings() {\n        let result = [];\n        if (this.null_in_output)\n            result.push('null values in output were replaced by empty strings');\n        if (this.delim_in_simple_output)\n            result.push('Some output fields contain separator');\n        return result;\n    };\n\n}\n\n\nclass FileSystemCSVRegistry extends rbql.RBQLTableRegistry {\n    constructor(input_file_dir, delim, policy, encoding, has_header=false, comment_prefix=null, options=null) {\n        super();\n        this.input_file_dir = input_file_dir;\n        this.delim = delim;\n        this.policy = policy;\n        this.encoding = encoding;\n        this.has_header = has_header;\n        this.comment_prefix = comment_prefix;\n        this.stream = null;\n        this.record_iterator = null;\n\n        this.options = options;\n        this.bulk_input_path = null;\n        this.table_path = null;\n    }\n\n    get_iterator_by_table_id(table_id) {\n        this.table_path = find_table_path(this.input_file_dir, table_id);\n        if (this.table_path === null) {\n            throw new RbqlIOHandlingError(`Unable to find join table \"${table_id}\"`);\n        }\n        if (this.options && this.options['bulk_read']) {\n            this.bulk_input_path = this.table_path;\n        } else {\n            this.stream = fs.createReadStream(this.table_path);\n        }\n        this.record_iterator = new CSVRecordIterator(this.stream, this.bulk_input_path, this.encoding, this.delim, this.policy, this.has_header, this.comment_prefix, table_id, 'b');\n        return this.record_iterator;\n    };\n\n    get_warnings(output_warnings) {\n        if (this.record_iterator && this.has_header) {\n            output_warnings.push(`The first record in JOIN file ${path.basename(this.table_path)} was also treated as header (and skipped)`);\n        }\n    }\n}\n\n\nasync function query_csv(query_text, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, output_warnings, with_headers=false, comment_prefix=null, user_init_code='', options=null) {\n    let input_stream = null;\n    let bulk_input_path = null;\n    if (options && options['bulk_read'] && input_path) {\n        bulk_input_path = input_path;\n    } else {\n        input_stream = input_path === null ? process.stdin : fs.createReadStream(input_path);\n    }\n    let [output_stream, close_output_on_finish] = output_path === null ? [process.stdout, false] : [fs.createWriteStream(output_path), true];\n    if (input_delim == '\"' && input_policy == 'quoted')\n        throw new RbqlIOHandlingError('Double quote delimiter is incompatible with \"quoted\" policy');\n    if (csv_encoding == 'latin-1')\n        csv_encoding = 'binary';\n    if (!is_ascii(query_text) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n    if ((!is_ascii(input_delim) || !is_ascii(output_delim)) && csv_encoding == 'binary')\n        throw new RbqlIOHandlingError('To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary');\n\n    let default_init_source_path = path.join(os.homedir(), '.rbql_init_source.js');\n    if (user_init_code == '' && fs.existsSync(default_init_source_path)) {\n        user_init_code = read_user_init_code(default_init_source_path);\n    }\n    let input_file_dir = input_path ? path.dirname(input_path) : null;\n    let join_tables_registry = new FileSystemCSVRegistry(input_file_dir, input_delim, input_policy, csv_encoding, with_headers, comment_prefix, options);\n    let input_iterator = new CSVRecordIterator(input_stream, bulk_input_path, csv_encoding, input_delim, input_policy, with_headers, comment_prefix);\n    let output_writer = new CSVWriter(output_stream, close_output_on_finish, csv_encoding, output_delim, output_policy);\n\n    await rbql.query(query_text, input_iterator, output_writer, output_warnings, join_tables_registry, user_init_code);\n    join_tables_registry.get_warnings(output_warnings);\n}\n\n\nmodule.exports.is_ascii = is_ascii;\nmodule.exports.CSVRecordIterator = CSVRecordIterator;\nmodule.exports.CSVWriter = CSVWriter;\nmodule.exports.FileSystemCSVRegistry = FileSystemCSVRegistry;\nmodule.exports.interpret_named_csv_format = interpret_named_csv_format;\nmodule.exports.read_user_init_code = read_user_init_code;\nmodule.exports.query_csv = query_csv;\nmodule.exports.RecordQueue = RecordQueue;\nmodule.exports.exception_to_error_info = rbql.exception_to_error_info;\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const vscode = require('vscode');\n\nconst path = require('path'); // For RBQL and preview\n\nconst fs = require('fs'); // For RBQL and preview\nconst os = require('os'); // For RBQL and preview\nconst child_process = require('child_process'); // For RBQL\n\nlet client_html_template_web = null;\n\n// TODO make the `is_web_ext` check more reliable and explicit.\nlet is_web_ext = (os.homedir === undefined); // Runs as web extension in browser.\n\n// See DEV_README.md for instructions\n\nconst csv_utils = require('./rbql_core/rbql-js/csv_utils.js');\nvar rbql_csv = null; // Using lazy load to improve startup performance\nvar rainbow_utils = null; // Using lazy load to improve startup performance\n\nvar integration_test_config = null;\n\n\nfunction ll_rbql_csv() {\n    if (rbql_csv === null)\n        rbql_csv = require('./rbql_core/rbql-js/rbql_csv.js');\n    return rbql_csv;\n}\n\n\nfunction ll_rainbow_utils() {\n    if (rainbow_utils === null)\n        rainbow_utils = require('./rainbow_utils.js');\n    return rainbow_utils;\n}\n\n\nconst dialect_map = {\n    'csv': [',', 'quoted'],\n    'tsv': ['\\t', 'simple'],\n    'csv (semicolon)': [';', 'quoted'],\n    'csv (pipe)': ['|', 'simple'],\n    'csv (tilde)': ['~', 'simple'],\n    'csv (caret)': ['^', 'simple'],\n    'csv (colon)': [':', 'simple'],\n    'csv (double quote)': ['\"', 'simple'],\n    'csv (equals)': ['=', 'simple'],\n    'csv (dot)': ['.', 'simple'],\n    'csv (whitespace)': [' ', 'whitespace'],\n    'csv (hyphen)': ['-', 'simple']\n};\n\n\n// This structure will get properly initialized during the startup.\nlet absolute_path_map = {\n    'rbql_client.js': null,\n    'contrib/textarea-caret-position/index.js': null,\n    'rbql_suggest.js': null,\n    'rbql_logo.svg': null,\n    'rbql_client.html': null,\n    'rbql mock/rbql_mock.py': null,\n    'rbql_core/vscode_rbql.py': null\n};\n\n\nfunction read_integration_test_config() {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    let config_path = path.join(path.dirname(absolute_path_map['rbql_client.js']), 'test', '.tmp_test_config.json');\n    if (fs.existsSync(config_path)) {\n        let data = fs.readFileSync(config_path, {encoding: 'utf8', flag: 'r'});\n        integration_test_config = JSON.parse(data);\n    } else {\n        integration_test_config = null;\n    }\n}\n\n\nvar lint_results = new Map();\nvar aligned_files = new Set();\nvar autodetection_stoplist = new Set();\nvar original_language_ids = new Map();\nvar result_set_parent_map = new Map();\n\nvar lint_status_bar_button = null;\nvar rbql_status_bar_button = null;\nvar align_shrink_button = null;\nvar rainbow_off_status_bar_button = null;\nvar copy_back_button = null;\n\nlet last_statusbar_doc = null;\n\nconst preview_window_size = 100;\nconst max_preview_field_length = 250;\n\nvar rbql_context = null;\n\nvar last_rbql_queries = new Map(); // Query history does not replace this structure, it is also used to store partially entered queries for preview window switch.\n\nvar client_html_template = null;\n\nvar global_state = null;\n\nvar preview_panel = null;\n\nvar doc_edit_subscription = null;\n\nconst scratch_buf_marker = 'vscode_rbql_scratch';\n\n\nfunction map_separator_to_language_id(separator) {\n    for (let language_id in dialect_map) {\n        if (!dialect_map.hasOwnProperty(language_id))\n            continue;\n        if (dialect_map[language_id][0] == separator)\n            return language_id;\n    }\n    return null;\n}\n\n\nfunction get_last(arr) {\n    return arr[arr.length - 1];\n}\n\n\nfunction get_from_global_state(key, default_value) {\n    if (global_state) {\n        var value = global_state.get(key);\n        if (value !== null && value !== undefined)\n            return value;\n    }\n    return default_value;\n}\n\n\nfunction save_to_global_state(key, value) {\n    if (global_state && key) {\n        global_state.update(key, value);\n        return true;\n    }\n    return false;\n}\n\n\nfunction populate_optimistic_rfc_csv_record_map(document, requested_end_record, dst_record_map, comment_prefix=null) {\n    // FIXME put into rainbow_utils.js\n    let num_lines = document.lineCount;\n    let record_begin = null;\n    let start_line_idx = dst_record_map.length ? get_last(dst_record_map)[1] : 0;\n    for (let lnum = start_line_idx; lnum < num_lines && dst_record_map.length < requested_end_record; ++lnum) {\n        let line_text = document.lineAt(lnum).text;\n        if (lnum + 1 >= num_lines && line_text == \"\")\n            break; // Skip the last empty line.\n        if (comment_prefix && line_text.startsWith(comment_prefix))\n            continue;\n        let match_list = line_text.match(/\"/g);\n        let has_unbalanced_double_quote = match_list && match_list.length % 2 == 1;\n        if (record_begin === null && !has_unbalanced_double_quote) {\n            dst_record_map.push([lnum, lnum + 1]);\n        } else if (record_begin === null && has_unbalanced_double_quote) {\n            record_begin = lnum;\n        } else if (!has_unbalanced_double_quote) {\n            continue;\n        } else {\n            dst_record_map.push([record_begin, lnum + 1]);\n            record_begin = null;\n        }\n    }\n    if (record_begin !== null) {\n        dst_record_map.push([record_begin, num_lines]);\n    }\n}\n\n\nfunction get_rfc_record_text(document, record_start, record_end) {\n    let result = [];\n    for (let i = record_start; i < record_end && i < document.lineCount; i++) {\n        result.push(document.lineAt(i).text);\n    }\n    return result.join('\\n');\n}\n\n\nfunction sample_preview_records_from_context(rbql_context, dst_message) {\n    let document = rbql_context.input_document;\n    let delim = rbql_context.delim;\n    let policy = rbql_context.policy;\n\n    rbql_context.requested_start_record = Math.max(rbql_context.requested_start_record, 0);\n\n    let preview_records = [];\n    if (rbql_context.enable_rfc_newlines) {\n        let requested_end_record = rbql_context.requested_start_record + preview_window_size;\n        populate_optimistic_rfc_csv_record_map(document, requested_end_record, rbql_context.rfc_record_map);\n        rbql_context.requested_start_record = Math.max(0, Math.min(rbql_context.requested_start_record, rbql_context.rfc_record_map.length - preview_window_size));\n        for (let nr = rbql_context.requested_start_record; nr < rbql_context.rfc_record_map.length && preview_records.length < preview_window_size; nr++) {\n            let [record_start, record_end] = rbql_context.rfc_record_map[nr];\n            let record_text = get_rfc_record_text(document, record_start, record_end);\n            let [cur_record, warning] = csv_utils.smart_split(record_text, delim, policy, false);\n            if (warning) {\n                dst_message.preview_sampling_error = `Double quotes are not consistent in record ${nr + 1} which starts at line ${record_start + 1}`;\n                return;\n            }\n            preview_records.push(cur_record);\n        }\n    } else {\n        let num_records = document.lineCount;\n        if (document.lineAt(Math.max(num_records - 1, 0)).text == '')\n            num_records -= 1;\n        rbql_context.requested_start_record = Math.max(0, Math.min(rbql_context.requested_start_record, num_records - preview_window_size));\n        for (let nr = rbql_context.requested_start_record; nr < num_records && preview_records.length < preview_window_size; nr++) {\n            let line_text = document.lineAt(nr).text;\n            let cur_record = csv_utils.smart_split(line_text, delim, policy, false)[0];\n            preview_records.push(cur_record);\n        }\n    }\n\n    for (let r = 0; r < preview_records.length; r++) {\n        let cur_record = preview_records[r];\n        for (let c = 0; c < cur_record.length; c++) {\n            if (cur_record[c].length > max_preview_field_length) {\n                cur_record[c] = cur_record[c].substr(0, max_preview_field_length) + '###UI_STRING_TRIM_MARKER###';\n            }\n        }\n    }\n    dst_message.preview_records = preview_records;\n    dst_message.start_record_zero_based = rbql_context.requested_start_record;\n}\n\n\nfunction make_header_key(file_path) {\n    return 'rbql_header:' + file_path;\n}\n\n\nfunction make_rfc_policy_key(file_path) {\n    return 'enable_rfc_newlines:' + file_path;\n}\n\n\nfunction make_with_headers_key(file_path) {\n    return 'rbql_with_headers:' + file_path;\n}\n\n\nfunction get_header_from_document(document, delim, policy) {\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix = config ? config.get('comment_prefix') : '';\n    let header_line = ll_rainbow_utils().get_header_line(document, comment_prefix);\n    return csv_utils.smart_split(header_line, delim, policy, /*preserve_quotes_and_whitespaces=*/false)[0];\n}\n\n\nfunction get_header(document, delim, policy) {\n    var file_path = document.fileName;\n    if (file_path) {\n        let raw_header = get_from_global_state(make_header_key(file_path), null);\n        if (raw_header) {\n            try {\n                return JSON.parse(raw_header)\n            } catch (err) { // Prior versions stored the header as CSV.\n                return csv_utils.smart_split(header, ',', 'quoted', false)[0];\n            }\n        }\n    }\n    return get_header_from_document(document, delim, policy);\n}\n\n\nfunction get_field_by_line_position(fields, query_pos) {\n    if (!fields.length)\n        return null;\n    var col_num = 0;\n    var cpos = fields[col_num].length + 1;\n    while (query_pos > cpos && col_num + 1 < fields.length) {\n        col_num += 1;\n        cpos = cpos + fields[col_num].length + 1;\n    }\n    return col_num;\n}\n\n\nfunction make_hover_text(document, position, language_id, enable_tooltip_column_names, enable_tooltip_warnings) {\n    let [delim, policy] = dialect_map[language_id];\n    var lnum = position.line;\n    var cnum = position.character;\n    var line = document.lineAt(lnum).text;\n\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix = config ? config.get('comment_prefix') : '';\n    if (comment_prefix && line.startsWith(comment_prefix))\n        return 'Comment';\n\n    var report = csv_utils.smart_split(line, delim, policy, true);\n\n    var entries = report[0];\n    var warning = report[1];\n    var col_num = get_field_by_line_position(entries, cnum + 1);\n\n    if (col_num == null)\n        return null;\n    var result = 'Col #' + (col_num + 1);\n\n    var header = get_header(document, delim, policy);\n    if (enable_tooltip_column_names && col_num < header.length) {\n        const max_label_len = 50;\n        let column_label = header[col_num].trim();\n        var short_column_label = column_label.substr(0, max_label_len);\n        if (short_column_label != column_label)\n            short_column_label = short_column_label + '...';\n        result += ', Header: \"' + short_column_label + '\"';\n    }\n    if (enable_tooltip_warnings) {\n        if (warning) {\n            result += '; ERR: Inconsistent double quotes in line';\n        } else if (header.length != entries.length) {\n            result += `; WARN: Inconsistent num of fields, header: ${header.length}, this line: ${entries.length}`;\n        }\n    }\n    return result;\n}\n\n\nfunction make_hover(document, position, language_id, cancellation_token) {\n    if (last_statusbar_doc != document) {\n        refresh_status_bar_buttons(document); // Being paranoid and making sure that the buttons are visible.\n    }\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    if (!config)\n        return;\n    if (!config.get('enable_tooltip'))\n        return;\n    let enable_tooltip_column_names = config.get('enable_tooltip_column_names');\n    let enable_tooltip_warnings = config.get('enable_tooltip_warnings');\n    var hover_text = make_hover_text(document, position, language_id, enable_tooltip_column_names, enable_tooltip_warnings);\n    if (hover_text && !cancellation_token.isCancellationRequested) {\n        let mds = null;\n        try {\n            mds = new vscode.MarkdownString();\n            mds.appendCodeblock(hover_text, 'rainbow hover markup');\n        } catch (e) {\n            mds = hover_text; // Older VSCode versions may not have MarkdownString/appendCodeblock functionality.\n        }\n        return new vscode.Hover(mds);\n    } else {\n        return null;\n    }\n}\n\n\nfunction produce_lint_report(active_doc, delim, policy, config) {\n    let comment_prefix = config.get('comment_prefix');\n    let detect_trailing_spaces = config.get('csv_lint_detect_trailing_spaces');\n    let first_trailing_space_line = null;\n    var num_lines = active_doc.lineCount;\n    var num_fields = null;\n    for (var lnum = 0; lnum < num_lines; lnum++) {\n        var line_text = active_doc.lineAt(lnum).text;\n        if (lnum + 1 == num_lines && !line_text)\n            break;\n        if (comment_prefix && line_text.startsWith(comment_prefix))\n            continue;\n        var split_result = csv_utils.smart_split(line_text, delim, policy, true);\n        if (split_result[1]) {\n            return 'Error. Line ' + (lnum + 1) + ' has formatting error: double quote chars are not consistent';\n        }\n        if (detect_trailing_spaces && first_trailing_space_line === null) {\n            let fields = split_result[0];\n            for (let i = 0; i < fields.length; i++) {\n                if (fields[i].length && (fields[i].charAt(0) == ' ' || fields[i].slice(-1) == ' ')) {\n                    first_trailing_space_line = lnum;\n                }\n            }\n        }\n        if (!num_fields) {\n            num_fields = split_result[0].length;\n        }\n        if (num_fields != split_result[0].length) {\n            return 'Error. Number of fields is not consistent: e.g. line 1 has ' + num_fields + ' fields, and line ' + (lnum + 1) + ' has ' + split_result[0].length + ' fields.';\n        }\n    }\n    if (first_trailing_space_line !== null) {\n        return 'Leading/Trailing spaces detected: e.g. at line ' + (first_trailing_space_line + 1) + '. Run \"Shrink\" command to remove them.';\n    }\n    return 'OK';\n}\n\n\nfunction calc_column_sizes(active_doc, delim, policy) {\n    let result = [];\n    let num_lines = active_doc.lineCount;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix = config ? config.get('comment_prefix') : '';\n    for (let lnum = 0; lnum < num_lines; lnum++) {\n        let line_text = active_doc.lineAt(lnum).text;\n        if (comment_prefix && line_text.startsWith(comment_prefix))\n            continue;\n        let [fields, warning] = csv_utils.smart_split(line_text, delim, policy, true);\n        if (warning) {\n            return [null, lnum + 1];\n        }\n        for (let i = 0; i < fields.length; i++) {\n            if (result.length <= i)\n                result.push(0);\n            result[i] = Math.max(result[i], (fields[i].trim()).length);\n        }\n    }\n    return [result, null];\n}\n\n\nfunction shrink_columns(active_doc, delim, policy) {\n    let result_lines = [];\n    let num_lines = active_doc.lineCount;\n    let has_edit = false;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix = config ? config.get('comment_prefix') : '';\n    for (let lnum = 0; lnum < num_lines; lnum++) {\n        let line_text = active_doc.lineAt(lnum).text;\n        if (comment_prefix && line_text.startsWith(comment_prefix)) {\n            result_lines.push(line_text);\n            continue;\n        }\n        let [fields, warning] = csv_utils.smart_split(line_text, delim, policy, true);\n        if (warning) {\n            return [null, lnum + 1];\n        }\n        for (let i = 0; i < fields.length; i++) {\n            let adjusted = fields[i].trim();\n            if (fields[i].length != adjusted.length) {\n                fields[i] = adjusted;\n                has_edit = true;\n            }\n        }\n        result_lines.push(fields.join(delim));\n    }\n    if (!has_edit)\n        return [null, null];\n    return [result_lines.join('\\n'), null];\n}\n\n\nfunction align_columns(active_doc, delim, policy, column_sizes) {\n    let result_lines = [];\n    let num_lines = active_doc.lineCount;\n    let has_edit = false;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix = config ? config.get('comment_prefix') : '';\n    for (let lnum = 0; lnum < num_lines; lnum++) {\n        let line_text = active_doc.lineAt(lnum).text;\n        if (comment_prefix && line_text.startsWith(comment_prefix)) {\n            result_lines.push(line_text);\n            continue;\n        }\n        let fields = csv_utils.smart_split(line_text, delim, policy, true)[0];\n        for (let i = 0; i < fields.length - 1; i++) {\n            if (i >= column_sizes.length) // Safeguard against async doc edit.\n                break;\n            let adjusted = fields[i].trim();\n            let delta_len = column_sizes[i] - adjusted.length;\n            if (delta_len >= 0) { // Safeguard against async doc edit.\n                adjusted += ' '.repeat(delta_len + 1);\n            }\n            if (fields[i] != adjusted) {\n                fields[i] = adjusted;\n                has_edit = true;\n            }\n        }\n        result_lines.push(fields.join(delim));\n    }\n    if (!has_edit)\n        return null;\n    return result_lines.join('\\n');\n}\n\n\nfunction get_active_editor() {\n    var active_window = vscode.window;\n    if (!active_window)\n        return null;\n    var active_editor = active_window.activeTextEditor;\n    if (!active_editor)\n        return null;\n    return active_editor;\n}\n\n\nfunction get_active_doc(active_editor=null) {\n    if (!active_editor)\n        active_editor = get_active_editor();\n    if (!active_editor)\n        return null;\n    var active_doc = active_editor.document;\n    if (!active_doc)\n        return null;\n    return active_doc;\n}\n\n\nfunction show_lint_status_bar_button(file_path, language_id) {\n    let lint_cache_key = `${file_path}.${language_id}`;\n    if (!lint_results.has(lint_cache_key))\n        return;\n    var lint_report = lint_results.get(lint_cache_key);\n    if (!lint_status_bar_button)\n        lint_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    lint_status_bar_button.text = 'CSVLint';\n    if (lint_report === 'OK') {\n        lint_status_bar_button.color = '#62f442';\n    } else if (lint_report == 'Processing...') {\n        lint_status_bar_button.color = '#A0A0A0';\n    } else if (lint_report.indexOf('spaces detected') != -1) {\n        lint_status_bar_button.color = '#ffff28';\n    } else {\n        lint_status_bar_button.color = '#f44242';\n    }\n    lint_status_bar_button.tooltip = lint_report + '\\nClick to recheck';\n    lint_status_bar_button.command = 'rainbow-csv.CSVLint';\n    lint_status_bar_button.show();\n}\n\n\nfunction show_align_shrink_button(file_path) {\n    if (!align_shrink_button)\n        align_shrink_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    if (aligned_files.has(file_path)) {\n        align_shrink_button.text = 'Shrink';\n        align_shrink_button.tooltip = 'Click to shrink table (Then you can click again to align)';\n        align_shrink_button.command = 'rainbow-csv.Shrink';\n    } else {\n        align_shrink_button.text = 'Align';\n        align_shrink_button.tooltip = 'Click to align table (Then you can click again to shrink)';\n        align_shrink_button.command = 'rainbow-csv.Align';\n    }\n    align_shrink_button.show();\n}\n\n\nfunction show_rainbow_off_status_bar_button() {\n    if (typeof vscode.languages.setTextDocumentLanguage == \"undefined\") {\n        return;\n    }\n    if (!rainbow_off_status_bar_button)\n        rainbow_off_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    rainbow_off_status_bar_button.text = 'Rainbow OFF';\n    rainbow_off_status_bar_button.tooltip = 'Click to restore original file type and syntax';\n    rainbow_off_status_bar_button.command = 'rainbow-csv.RainbowSeparatorOff';\n    rainbow_off_status_bar_button.show();\n}\n\n\nfunction show_rbql_status_bar_button() {\n    if (!rbql_status_bar_button)\n        rbql_status_bar_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    rbql_status_bar_button.text = 'Query';\n    rbql_status_bar_button.tooltip = 'Click to run SQL-like RBQL query';\n    rbql_status_bar_button.command = 'rainbow-csv.RBQL';\n    rbql_status_bar_button.show();\n}\n\n\nfunction hide_status_bar_buttons() {\n    let all_buttons = [lint_status_bar_button, rbql_status_bar_button, rainbow_off_status_bar_button, copy_back_button, align_shrink_button];\n    for (let i = 0; i < all_buttons.length; i++) {\n        if (all_buttons[i])\n            all_buttons[i].hide();\n    }\n}\n\n\nfunction show_rbql_copy_to_source_button(file_path) {\n    let parent_table_path = result_set_parent_map.get(file_path.toLowerCase());\n    if (!parent_table_path || parent_table_path.indexOf(scratch_buf_marker) != -1)\n        return;\n    let parent_basename = path.basename(parent_table_path);\n    if (!copy_back_button)\n        copy_back_button = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n    copy_back_button.text = 'Copy Back';\n    copy_back_button.tooltip = `Copy to parent table: ${parent_basename}`;\n    copy_back_button.command = 'rainbow-csv.CopyBack';\n    copy_back_button.show();\n}\n\n\nfunction refresh_status_bar_buttons(active_doc=null) {\n    if (!active_doc)\n        active_doc = get_active_doc();\n    last_statusbar_doc = active_doc;\n    var file_path = active_doc ? active_doc.fileName : null;\n    if (!active_doc || !file_path) {\n        hide_status_bar_buttons();\n        return;\n    }\n    if (file_path.endsWith('.git')) {\n        return; // Sometimes for git-controlled dirs VSCode opens mysterious .git files. Skip them, don't hide buttons.\n    }\n    hide_status_bar_buttons();\n    var language_id = active_doc.languageId;\n    if (!dialect_map.hasOwnProperty(language_id))\n        return;\n    show_lint_status_bar_button(file_path, language_id);\n    show_rbql_status_bar_button();\n    show_align_shrink_button(file_path);\n    show_rainbow_off_status_bar_button();\n    show_rbql_copy_to_source_button(file_path);\n}\n\n\nfunction csv_lint(active_doc, is_manual_op) {\n    if (!active_doc)\n        active_doc = get_active_doc();\n    if (!active_doc)\n        return null;\n    var file_path = active_doc.fileName; // For new unitled scratch documents this would be \"Untitled-1\", \"Untitled-2\", etc...\n    if (!file_path)\n        return null;\n    var language_id = active_doc.languageId;\n    if (!dialect_map.hasOwnProperty(language_id))\n        return null;\n    let lint_cache_key = `${file_path}.${language_id}`;\n    if (!is_manual_op) {\n        if (lint_results.has(lint_cache_key))\n            return null;\n        const config = vscode.workspace.getConfiguration('rainbow_csv');\n        if (config && config.get('enable_auto_csv_lint') === false)\n            return null;\n    }\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    if (!config)\n        return null;\n    lint_results.set(lint_cache_key, 'Processing...');\n    refresh_status_bar_buttons(active_doc); // Visual feedback.\n    let [delim, policy] = dialect_map[language_id];\n    var lint_report = produce_lint_report(active_doc, delim, policy, config);\n    lint_results.set(lint_cache_key, lint_report);\n    return lint_report;\n}\n\n\nfunction csv_lint_cmd() {\n    // TODO re-run on each file save with content change.\n    csv_lint(null, true);\n    // Need timeout here to give user enough time to notice green -> yellow -> green switch, this is a sort of visual feedback.\n    setTimeout(refresh_status_bar_buttons, 500);\n}\n\n\nfunction show_warnings(warnings) {\n    if (!warnings || !warnings.length)\n        return;\n    var active_window = vscode.window;\n    if (!active_window)\n        return null;\n    for (var i = 0; i < warnings.length; i++) {\n        active_window.showWarningMessage('RBQL warning: ' + warnings[i]);\n    }\n}\n\n\nfunction show_single_line_error(error_msg) {\n    var active_window = vscode.window;\n    if (!active_window)\n        return;\n    active_window.showErrorMessage(error_msg);\n}\n\n\nfunction try_change_document_language(active_doc, language_id, is_manual_op, callback_func) {\n    try {\n        vscode.languages.setTextDocumentLanguage(active_doc, language_id).then((doc) => {\n            if (callback_func !== null)\n                callback_func(doc);\n        });\n    } catch (error) {\n        if (is_manual_op)\n            show_single_line_error(\"Unable to proceed. Minimal VSCode version required: 1.28\");\n        return false;\n    }\n    return true;\n}\n\n\nfunction handle_rbql_result_file(text_doc, warnings) {\n    var out_delim = rbql_context.output_delim;\n    let language_id = map_separator_to_language_id(out_delim);\n    var active_window = vscode.window;\n    if (!active_window)\n        return;\n    var handle_success = function(_editor) {\n        if (language_id && text_doc.language_id != language_id) {\n            console.log('changing RBQL result language ' + text_doc.language_id + ' -> ' + language_id);\n            try_change_document_language(text_doc, language_id, false, null);\n        }\n        show_warnings(warnings);\n    };\n    var handle_failure = function(_reason) { show_single_line_error('Unable to open document'); };\n    active_window.showTextDocument(text_doc).then(handle_success, handle_failure);\n}\n\n\nfunction run_command(cmd, args, close_and_error_guard, callback_func) {\n    var command = child_process.spawn(cmd, args, {'windowsHide': true});\n    var stdout = '';\n    var stderr = '';\n    command.stdout.on('data', function(data) {\n        stdout += data.toString();\n    });\n    command.stderr.on('data', function(data) {\n        stderr += data.toString();\n    });\n    command.on('close', function(code) {\n        if (!close_and_error_guard['process_reported']) {\n            close_and_error_guard['process_reported'] = true;\n            callback_func(code, stdout, stderr);\n        }\n    });\n    command.on('error', function(error) {\n        var error_msg = error ? error.name + ': ' + error.message : '';\n        if (!close_and_error_guard['process_reported']) {\n            close_and_error_guard['process_reported'] = true;\n            callback_func(1, '', 'Something went wrong. Make sure you have python installed and added to PATH variable in your OS. Or you can use it with JavaScript instead - it should work out of the box\\nDetails:\\n' + error_msg);\n        }\n    });\n}\n\n\nfunction handle_command_result(src_table_path, dst_table_path, error_code, stdout, stderr, webview_report_handler) {\n    let json_report = stdout;\n    let error_type = null;\n    let error_msg = null;\n    let warnings = [];\n    if (error_code || !json_report || stderr) {\n        error_type = 'Integration';\n        error_msg = stderr ? stderr : 'empty error';\n    } else {\n        try {\n            let report = JSON.parse(json_report);\n            if (report.hasOwnProperty('error_type'))\n                error_type = report['error_type'];\n            if (report.hasOwnProperty('error_msg'))\n                error_msg = report['error_msg'];\n            if (report.hasOwnProperty('warnings'))\n                warnings = report['warnings'];\n        } catch (e) {\n            error_type = 'Integration';\n            error_msg = 'Unable to parse JSON report';\n        }\n    }\n    webview_report_handler(error_type, error_msg);\n    if (error_type || error_msg) {\n        return; // Just exit: error would be shown in the preview window.\n    }\n    // No need to close the RBQL console here, better to leave it open so it can be used to quickly adjust the query if needed.\n    autodetection_stoplist.add(dst_table_path);\n    result_set_parent_map.set(dst_table_path.toLowerCase(), src_table_path);\n    vscode.workspace.openTextDocument(dst_table_path).then(doc => handle_rbql_result_file(doc, warnings));\n}\n\n\nfunction get_dst_table_name(input_path, output_delim) {\n    var table_name = path.basename(input_path);\n    var orig_extension = path.extname(table_name);\n    var delim_ext_map = {'\\t': '.tsv', ',': '.csv'};\n    var dst_extension = '.txt';\n    if (delim_ext_map.hasOwnProperty(output_delim)) {\n        dst_extension = delim_ext_map[output_delim];\n    } else if (orig_extension.length > 1) {\n        dst_extension = orig_extension;\n    }\n    return table_name + dst_extension;\n}\n\n\nfunction handle_worker_success(output_path, warnings, webview_report_handler) {\n    webview_report_handler(null, null);\n    autodetection_stoplist.add(output_path);\n    vscode.workspace.openTextDocument(output_path).then(doc => handle_rbql_result_file(doc, warnings));\n}\n\n\nfunction file_path_to_query_key(file_path) {\n    return (file_path && file_path.indexOf(scratch_buf_marker) != -1) ? scratch_buf_marker : file_path;\n}\n\n\nfunction run_rbql_query(input_path, csv_encoding, backend_language, rbql_query, output_dialect, enable_rfc_newlines, with_headers, webview_report_handler) {\n    last_rbql_queries.set(file_path_to_query_key(input_path), rbql_query);\n    var cmd = 'python';\n    const test_marker = 'test ';\n    let close_and_error_guard = {'process_reported': false};\n\n    let [input_delim, input_policy] = [rbql_context.delim, rbql_context.policy];\n    if (input_policy == 'quoted' && enable_rfc_newlines)\n        input_policy = 'quoted_rfc';\n    let [output_delim, output_policy] = [input_delim, input_policy];\n    if (output_dialect == 'csv')\n        [output_delim, output_policy] = [',', 'quoted']; // XXX should it be \"quoted_rfc\" instead?\n    if (output_dialect == 'tsv')\n        [output_delim, output_policy] = ['\\t', 'simple'];\n    rbql_context.output_delim = output_delim;\n\n    let tmp_dir = os.tmpdir();\n    let output_file_name = get_dst_table_name(input_path, output_delim);\n    let output_path = path.join(tmp_dir, output_file_name);\n\n    if (rbql_query.startsWith(test_marker)) {\n        if (rbql_query.indexOf('nopython') != -1) {\n            cmd = 'nopython';\n        }\n        let args = [absolute_path_map['rbql mock/rbql_mock.py'], rbql_query];\n        run_command(cmd, args, close_and_error_guard, function(error_code, stdout, stderr) { handle_command_result(input_path, output_path, error_code, stdout, stderr, webview_report_handler); });\n        return;\n    }\n    if (backend_language == 'js') {\n        let warnings = [];\n        var handle_success = function() {\n            result_set_parent_map.set(output_path.toLowerCase(), input_path);\n            handle_worker_success(output_path, warnings, webview_report_handler);\n        };\n        ll_rbql_csv().query_csv(rbql_query, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding, warnings, with_headers, null, '', {'bulk_read': true}).then(handle_success).catch(e => {\n            let [error_type, error_msg] = ll_rbql_csv().exception_to_error_info(e);\n            webview_report_handler(error_type, error_msg);\n        });\n    } else {\n        let cmd_safe_query = Buffer.from(rbql_query, \"utf-8\").toString(\"base64\");\n        let args = [absolute_path_map['rbql_core/vscode_rbql.py'], cmd_safe_query, input_path, input_delim, input_policy, output_path, output_delim, output_policy, csv_encoding];\n        if (with_headers)\n            args.push('--with_headers');\n        run_command(cmd, args, close_and_error_guard, function(error_code, stdout, stderr) { handle_command_result(input_path, output_path, error_code, stdout, stderr, webview_report_handler); });\n    }\n}\n\n\nfunction get_dialect(document) {\n    var language_id = document.languageId;\n    if (!dialect_map.hasOwnProperty(language_id))\n        return ['monocolumn', 'monocolumn'];\n    return dialect_map[language_id];\n}\n\nfunction set_header_line() {\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    var active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n\n    var dialect = get_dialect(active_doc);\n    var delim = dialect[0];\n    var policy = dialect[1];\n\n    let file_path = active_doc.fileName;\n    let selection = active_editor.selection;\n    let raw_header = active_doc.lineAt(selection.start.line).text;\n\n    let header = csv_utils.smart_split(raw_header, delim, policy, false)[0];\n    save_to_global_state(make_header_key(file_path), JSON.stringify(header));\n}\n\nfunction set_rainbow_separator() {\n    let active_editor = get_active_editor();\n    if (!active_editor)\n        return;\n    var active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    let original_language_id = active_doc.languageId;\n    let selection = active_editor.selection;\n    if (!selection) {\n        show_single_line_error(\"Selection is empty\");\n        return;\n    }\n    if (selection.start.line != selection.end.line || selection.start.character + 1 != selection.end.character) {\n        show_single_line_error(\"Selection must contain exactly one separator character\");\n        return;\n    }\n    let separator = active_doc.lineAt(selection.start.line).text.charAt(selection.start.character);\n    let language_id = map_separator_to_language_id(separator);\n    if (!language_id) {\n        show_single_line_error(\"Selected separator is not supported\");\n        return;\n    }\n    try_change_document_language(active_doc, language_id, true, (doc) => {\n        original_language_ids.set(doc.fileName, original_language_id);\n        csv_lint(doc, false);\n        refresh_status_bar_buttons(doc);\n    });\n}\n\n\nfunction restore_original_language() {\n    var active_doc = get_active_doc();\n    if (!active_doc)\n        return;\n    let file_path = active_doc.fileName;\n    autodetection_stoplist.add(file_path);\n    let original_language_id = 'plaintext';\n    if (original_language_ids.has(file_path)) {\n        original_language_id = original_language_ids.get(file_path);\n    }\n    if (!original_language_id || original_language_id == active_doc.languageId) {\n        show_single_line_error(\"Unable to restore original language\");\n        return;\n    }\n    try_change_document_language(active_doc, original_language_id, true, (doc) => {\n        original_language_ids.delete(file_path);\n        refresh_status_bar_buttons(doc);\n    });\n}\n\n\nfunction set_join_table_name() {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    var active_doc = get_active_doc();\n    if (!active_doc)\n        return;\n    let file_path = active_doc.fileName;\n    if (!file_path) {\n        show_single_line_error('Unable to use this document as join table');\n        return;\n    }\n    var title = \"Input table name to use in RBQL JOIN expressions instead of table path\";\n    var input_box_props = {\"prompt\": title, \"value\": 'b'};\n    vscode.window.showInputBox(input_box_props).then(table_name => ll_rainbow_utils().write_table_name(file_path, table_name));\n}\n\n\nfunction edit_column_names() {\n    var active_doc = get_active_doc();\n    var dialect = get_dialect(active_doc);\n    var delim = dialect[0];\n    var policy = dialect[1];\n    var file_path = active_doc.fileName;\n    if (!file_path) {\n        show_single_line_error('Unable to edit column names for non-file documents');\n        return;\n    }\n    if (policy == 'monocolumn')\n        return;\n    var old_header = get_header(active_doc, delim, policy);\n    var title = \"Adjust column names displayed in hover tooltips. Actual header line and file content won't be affected.\";\n    var old_header_str = quoted_join(old_header, delim);\n    var input_box_props = {\"prompt\": title, \"value\": old_header_str};\n    var handle_success = function (raw_new_header) {\n        let new_header = csv_utils.smart_split(raw_new_header, delim, policy, false)[0];\n        save_to_global_state(make_header_key(file_path), JSON.stringify(new_header));\n    };\n    var handle_failure = function(reason) { show_single_line_error('Unable to create input box: ' + reason); };\n    vscode.window.showInputBox(input_box_props).then(handle_success, handle_failure);\n}\n\n\nfunction column_edit(edit_mode) {\n    if (is_web_ext) {\n        // This function creates multiple cursors in web mode as expected (except the very first one?!), but they are inactive for some reason. \n        // TODO investigate and fix this.\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    let active_editor = get_active_editor();\n    if (!active_editor || !active_editor.selection)\n        return;\n    let active_doc = active_editor.document;\n    if (!active_doc)\n        return;\n    let dialect = get_dialect(active_doc);\n    let delim = dialect[0];\n    let policy = dialect[1];\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    if (!config)\n        return;\n    let comment_prefix = config.get('comment_prefix');\n\n    let position = active_editor.selection.active;\n    let lnum = position.line;\n    let cnum = position.character;\n    let line = active_doc.lineAt(lnum).text;\n\n    let report = csv_utils.smart_split(line, delim, policy, true);\n\n    let entries = report[0];\n    let quoting_warning = report[1];\n    let col_num = get_field_by_line_position(entries, cnum + 1);\n\n    let selections = [];\n    let num_lines = active_doc.lineCount;\n    if (num_lines >= 10000) {\n        show_single_line_error('Multicursor column edit works only for files smaller than 10000 lines.');\n        return;\n    }\n    for (let lnum = 0; lnum < num_lines; lnum++) {\n        let line_text = active_doc.lineAt(lnum).text;\n        if (lnum + 1 == num_lines && !line_text)\n            break;\n        if (comment_prefix && line_text.startsWith(comment_prefix))\n            continue;\n        let report = csv_utils.smart_split(line_text, delim, policy, true);\n        let entries = report[0];\n        quoting_warning = quoting_warning || report[1];\n        if (col_num >= entries.length) {\n            show_single_line_error(`Line ${lnum + 1} doesn't have field number ${col_num + 1}`);\n            return;\n        }\n        let char_pos_before = entries.slice(0, col_num).join('').length + col_num;\n        let char_pos_after = entries.slice(0, col_num + 1).join('').length + col_num;\n        if (edit_mode == 'ce_before' && policy == 'quoted' && line_text.substring(char_pos_before - 2, char_pos_before + 2).indexOf('\"') != -1) {\n            show_single_line_error(`Accidental data corruption prevention: Cursor at line ${lnum + 1} will not be set: a double quote is in proximity.`);\n            return;\n        }\n        if (edit_mode == 'ce_after' && policy == 'quoted' && line_text.substring(char_pos_after - 2, char_pos_after + 2).indexOf('\"') != -1) {\n            show_single_line_error(`Accidental data corruption prevention: Cursor at line ${lnum + 1} will not be set: a double quote is in proximity.`);\n            return;\n        }\n        if (edit_mode == 'ce_select' && char_pos_before == char_pos_after) {\n            show_single_line_error(`Accidental data corruption prevention: The column can not be selected: field ${col_num + 1} at line ${lnum + 1} is empty.`);\n            return;\n        }\n        let position_before = new vscode.Position(lnum, char_pos_before);\n        let position_after = new vscode.Position(lnum, char_pos_after);\n        if (edit_mode == 'ce_before') {\n            selections.push(new vscode.Selection(position_before, position_before));\n        }\n        if (edit_mode == 'ce_after') {\n            selections.push(new vscode.Selection(position_after, position_after));\n        }\n        if (edit_mode == 'ce_select') {\n            selections.push(new vscode.Selection(position_before, position_after));\n        }\n    }\n    active_editor.selections = selections;\n    if (quoting_warning) {\n        vscode.window.showWarningMessage('Some lines have quoting issues: cursors positioning may be incorrect.');\n    }\n}\n\n\nfunction shrink_table(active_editor, edit_builder) {\n    let active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    let language_id = active_doc.languageId;\n    if (!dialect_map.hasOwnProperty(language_id))\n        return;\n    let [delim, policy] = dialect_map[language_id];\n    let [shrinked_doc_text, first_failed_line] = shrink_columns(active_doc, delim, policy);\n    if (first_failed_line) {\n        show_single_line_error(`Unable to shrink: Inconsistent double quotes at line ${first_failed_line}`);\n        return;\n    }\n    aligned_files.delete(active_doc.fileName);\n    refresh_status_bar_buttons(active_doc);\n    if (shrinked_doc_text === null) {\n        vscode.window.showWarningMessage('No trailing whitespaces found, skipping');\n        return;\n    }\n    let invalid_range = new vscode.Range(0, 0, active_doc.lineCount /* Intentionally missing the '-1' */, 0);\n    let full_range = active_doc.validateRange(invalid_range);\n    edit_builder.replace(full_range, shrinked_doc_text);\n}\n\n\nfunction align_table(active_editor, edit_builder) {\n    let active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    let language_id = active_doc.languageId;\n    if (!dialect_map.hasOwnProperty(language_id))\n        return;\n    let [delim, policy] = dialect_map[language_id];\n    let [column_sizes, first_failed_line] = calc_column_sizes(active_doc, delim, policy);\n    if (first_failed_line) {\n        show_single_line_error(`Unable to align: Inconsistent double quotes at line ${first_failed_line}`);\n        return;\n    }\n    let aligned_doc_text = align_columns(active_doc, delim, policy, column_sizes);\n    aligned_files.add(active_doc.fileName);\n    refresh_status_bar_buttons(active_doc);\n    if (aligned_doc_text === null) {\n        vscode.window.showWarningMessage('Table is already aligned, skipping');\n        return;\n    }\n    let invalid_range = new vscode.Range(0, 0, active_doc.lineCount /* Intentionally missing the '-1' */, 0);\n    let full_range = active_doc.validateRange(invalid_range);\n    edit_builder.replace(full_range, aligned_doc_text);\n}\n\n\nfunction do_copy_back(query_result_doc, active_editor) {\n    let data = query_result_doc.getText();\n    let active_doc = get_active_doc(active_editor);\n    if (!active_doc)\n        return;\n    let invalid_range = new vscode.Range(0, 0, active_doc.lineCount /* Intentionally missing the '-1' */, 0);\n    let full_range = active_doc.validateRange(invalid_range);\n    active_editor.edit(edit => edit.replace(full_range, data));\n}\n\n\nfunction copy_back() {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    let result_doc = get_active_doc();\n    if (!result_doc)\n        return;\n    let file_path = result_doc.fileName;\n    let parent_table_path = result_set_parent_map.get(file_path.toLowerCase());\n    if (!parent_table_path)\n        return;\n    vscode.workspace.openTextDocument(parent_table_path).then(doc => vscode.window.showTextDocument(doc).then(active_editor => do_copy_back(result_doc, active_editor)));\n}\n\n\nfunction update_query_history(query) {\n    let history_list = get_from_global_state('rbql_query_history', []);\n    let old_index = history_list.indexOf(query);\n    if (old_index != -1) {\n        history_list.splice(old_index, 1);\n    } else if (history_list.length >= 20) {\n        history_list.splice(0, 1);\n    }\n    history_list.push(query);\n    save_to_global_state('rbql_query_history', history_list);\n}\n\n\nfunction handle_rbql_client_message(webview, message) {\n    let message_type = message['msg_type'];\n\n    if (message_type == 'handshake') {\n        var backend_language = get_from_global_state('rbql_backend_language', 'js');\n        var encoding = get_from_global_state('rbql_encoding', 'utf-8');\n        var init_msg = {'msg_type': 'handshake', 'backend_language': backend_language, 'encoding': encoding};\n        sample_preview_records_from_context(rbql_context, init_msg);\n        let path_key = file_path_to_query_key(rbql_context.input_document_path);\n        if (last_rbql_queries.has(path_key))\n            init_msg['last_query'] = last_rbql_queries.get(path_key);\n        let history_list = get_from_global_state('rbql_query_history', []);\n        init_msg['query_history'] = history_list;\n        init_msg['policy'] = rbql_context.policy;\n        init_msg['enable_rfc_newlines'] = rbql_context.enable_rfc_newlines;\n        init_msg['with_headers'] = rbql_context.with_headers;\n        init_msg['header'] = rbql_context.header;\n        if (integration_test_config) {\n            init_msg['integration_test_language'] = integration_test_config.rbql_backend;\n            init_msg['integration_test_query'] = integration_test_config.rbql_query;\n        }\n        webview.postMessage(init_msg);\n    }\n\n    if (message_type == 'fetch_table_header') {\n        try {\n            let table_id = message['table_id'];\n            let encoding = message['encoding'];\n            let table_path = ll_rainbow_utils().read_table_path(table_id);\n            if (!table_path)\n                return;\n            let process_header_line = function(header_line) {\n                let [fields, warning] = csv_utils.smart_split(header_line, rbql_context.delim, rbql_context.policy, false);\n                if (!warning) {\n                    webview.postMessage({'msg_type': 'fetch_table_header_response', 'header': fields});\n                }\n            };\n            ll_rainbow_utils().read_header(table_path, encoding, process_header_line);\n        } catch (e) {\n            console.error('Unable to get join table path: ' + String(e));\n        }\n    }\n\n    if (message_type == 'update_query') {\n        let rbql_query = message['query'];\n        if (!rbql_query)\n            return;\n        if (rbql_context.input_document_path)\n            last_rbql_queries.set(file_path_to_query_key(rbql_context.input_document_path), rbql_query);\n    }\n\n    if (message_type == 'newlines_policy_change') {\n        rbql_context.enable_rfc_newlines = message['enable_rfc_newlines'];\n        if (rbql_context.input_document_path)\n            save_to_global_state(make_rfc_policy_key(rbql_context.input_document_path), rbql_context.enable_rfc_newlines);\n        let protocol_message = {'msg_type': 'resample'};\n        sample_preview_records_from_context(rbql_context, protocol_message);\n        webview.postMessage(protocol_message);\n    }\n\n    if (message_type == 'with_headers_change') {\n        rbql_context.with_headers = message['with_headers'];\n        if (rbql_context.input_document_path)\n            save_to_global_state(make_with_headers_key(rbql_context.input_document_path), rbql_context.with_headers);\n    }\n\n    if (message_type == 'navigate') {\n        var navig_direction = message['direction'];\n        if (navig_direction == 'backward') {\n            rbql_context.requested_start_record -= preview_window_size;\n        } else if (navig_direction == 'forward') {\n            rbql_context.requested_start_record += preview_window_size;\n        } else if (navig_direction == 'begin') {\n            rbql_context.requested_start_record = 0;\n        } else if (navig_direction == 'end') {\n            rbql_context.requested_start_record = rbql_context.input_document.lineCount; // This is just max possible value which is incorrect and will be adjusted later.\n        }\n        let protocol_message = {'msg_type': 'navigate'};\n        sample_preview_records_from_context(rbql_context, protocol_message);\n        webview.postMessage(protocol_message);\n    }\n\n    if (message_type == 'run') {\n        let rbql_query = message['query'];\n        let backend_language = message['backend_language'];\n        let encoding = message['encoding'];\n        let output_dialect = message['output_dialect'];\n        let enable_rfc_newlines = message['enable_rfc_newlines'];\n        let with_headers = message['with_headers'];\n        var webview_report_handler = function(error_type, error_msg) {\n            let report_msg = {'msg_type': 'rbql_report'};\n            if (error_type)\n                report_msg[\"error_type\"] = error_type;\n            if (error_msg)\n                report_msg[\"error_msg\"] = error_msg;\n            webview.postMessage(report_msg);\n        };\n        update_query_history(rbql_query);\n        run_rbql_query(rbql_context.input_document_path, encoding, backend_language, rbql_query, output_dialect, enable_rfc_newlines, with_headers, webview_report_handler);\n    }\n\n    if (message_type == 'edit_udf') {\n        let backend_language = message['backend_language'];\n        let udf_file_path = null;\n        let default_content = '';\n        if (backend_language == 'js') {\n            udf_file_path = path.join(os.homedir(), '.rbql_init_source.js');\n            default_content = `// This file can be used to store RBQL UDFs. Example:\n            //\n            // function foo(value) {\n            //     return 'foo ' + String(value.length);\n            // }\n            // \n            // Functions defined in this file can be used in RBQL queries e.g. \n            // SELECT foo(a1), a2 WHERE foo(a3) != 'foo 5' LIMIT 10\n            //\n            // Don't forget to save this file after editing!\n            //\n            // Write your own functions bellow this line:\n            `.replace(new RegExp(/^  */, 'mg'), '');\n        } else {\n            udf_file_path = path.join(os.homedir(), '.rbql_init_source.py');\n            default_content = `# This file can be used to store RBQL UDFs. Example:\n            #\n            # def foo(value):\n            #     return 'foo ' + str(len(value))\n            # \n            # \n            # Functions defined in this file can be used in RBQL queries e.g. \n            # SELECT foo(a1), a2 WHERE foo(a3) != 'foo 5' LIMIT 10\n            #\n            # Don't forget to save this file after editing!\n            #\n            # Write your own functions bellow this line:\n            `.replace(new RegExp(/^  */, 'mg'), '');\n        }\n        if (!fs.existsSync(udf_file_path)) {\n            fs.writeFileSync(udf_file_path, default_content);\n        }\n        vscode.workspace.openTextDocument(udf_file_path).then(doc => vscode.window.showTextDocument(doc));\n    }\n\n    if (message_type == 'global_param_change') {\n        save_to_global_state(message['key'], message['value']);\n    }\n}\n\n\nfunction adjust_webview_paths(paths_list, client_html) {\n    for (const local_path of paths_list) {\n        let adjusted_webview_url = null;\n        if (is_web_ext) {\n            adjusted_webview_url = absolute_path_map[local_path];\n        } else {\n            adjusted_webview_url = preview_panel.webview.asWebviewUri(vscode.Uri.file(absolute_path_map[local_path]));\n        }\n        client_html = client_html.replace(`src=\"${local_path}\"`, `src=\"${adjusted_webview_url}\"`);\n    }\n    return client_html;\n}\n\n\nfunction edit_rbql() {\n    if (is_web_ext) {\n        show_single_line_error('RBQL is currently unavailable in web mode.');\n        return;\n    }\n    let active_window = vscode.window;\n    if (!active_window)\n        return;\n    let active_editor = active_window.activeTextEditor;\n    if (!active_editor)\n        return;\n    let active_doc = active_editor.document;\n    if (!active_doc)\n        return;\n    let orig_uri = active_doc.uri;\n    if (!orig_uri)\n        return;\n    // FIXME test with an untitled file in the web extension\n    // FIXME test with an unsaved but named file with modifications in the web extension\n    // For web orig_uri.scheme can have other valid values e.g. `vscode-test-web` when testing the browser integration.\n    if (orig_uri.scheme != 'file' && orig_uri.scheme != 'untitled' && !is_web_ext)\n        return;\n    if (orig_uri.scheme == 'file' && active_doc.isDirty && !is_web_ext) {\n        show_single_line_error(\"Unable to run RBQL: file has unsaved changes\");\n        return;\n    }\n    let input_path = null;\n    if (orig_uri.scheme == 'untitled' && !is_web_ext) {\n        // Scheme 'untitled' means that the document is a scratch buffer that hasn't been saved yet, see https://code.visualstudio.com/api/references/document-selector\n        let data = active_doc.getText();\n        let rnd_suffix = String(Math.floor(Math.random() * 1000000));\n        input_path = path.join(os.tmpdir(), `${scratch_buf_marker}_${rnd_suffix}.txt`);\n        // TODO consider adding username to the input_path and using chmod 600 on it.\n        fs.writeFileSync(input_path, data);\n    } else {\n        input_path = active_doc.fileName;\n    }\n\n    if (!input_path) {\n        show_single_line_error(\"Unable to run RBQL for this file\");\n        return;\n    }\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let language_id = active_doc.languageId;\n    let delim = 'monocolumn';\n    let policy = 'monocolumn';\n    if (dialect_map.hasOwnProperty(language_id)) {\n        [delim, policy] = dialect_map[language_id];\n    }\n    let enable_rfc_newlines = get_from_global_state(make_rfc_policy_key(input_path), false);\n    let with_headers_by_default = config ? config.get('rbql_with_headers_by_default') : false;\n    let with_headers = get_from_global_state(make_with_headers_key(input_path), with_headers_by_default);\n    let header = get_header_from_document(active_doc, delim, policy);\n    rbql_context = {\n        \"input_document\": active_doc,\n        \"input_document_path\": input_path,\n        \"requested_start_record\": 0,\n        \"delim\": delim,\n        \"policy\": policy,\n        \"rfc_record_map\": [],\n        \"enable_rfc_newlines\": enable_rfc_newlines,\n        \"with_headers\": with_headers,\n        \"header\": header\n    };\n\n    preview_panel = vscode.window.createWebviewPanel('rbql-console', 'RBQL Console', vscode.ViewColumn.Active, {enableScripts: true});\n    if (!client_html_template) {\n        if (is_web_ext) {\n            client_html_template = client_html_template_web;\n            if (!client_html_template) {\n                show_single_line_error(\"Unable to run RBQL, please open a bug ticket.\");\n                return;\n            }\n        } else {\n            client_html_template = fs.readFileSync(absolute_path_map['rbql_client.html'], \"utf8\");\n        }\n    }\n    let client_html = client_html_template;\n    client_html = adjust_webview_paths(['contrib/textarea-caret-position/index.js', 'rbql_suggest.js', 'rbql_client.js', 'rbql_logo.svg'], client_html);\n    preview_panel.webview.html = client_html;\n    preview_panel.webview.onDidReceiveMessage(function(message) { handle_rbql_client_message(preview_panel.webview, message); });\n}\n\n\nfunction get_num_columns_if_delimited(active_doc, delim, policy, min_num_columns, min_num_lines) {\n    var num_lines = active_doc.lineCount;\n    let num_fields = 0;\n    let num_lines_checked = 0;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let comment_prefix_for_autodetection = config ? config.get('comment_prefix') : '';\n    if (!comment_prefix_for_autodetection)\n        comment_prefix_for_autodetection = '#';\n    for (var lnum = 0; lnum < num_lines; lnum++) {\n        var line_text = active_doc.lineAt(lnum).text;\n        if (lnum + 1 == num_lines && !line_text)\n            break;\n        if (line_text.startsWith(comment_prefix_for_autodetection))\n            continue;\n        let [fields, warning] = csv_utils.smart_split(line_text, delim, policy, true);\n        if (warning)\n            return 0; // TODO don't fail on warnings?\n        if (!num_fields)\n            num_fields = fields.length;\n        if (num_fields < min_num_columns || num_fields != fields.length)\n            return 0;\n        num_lines_checked += 1;\n    }\n    return num_lines_checked >= min_num_lines ? num_fields : 0;\n}\n\n\nfunction autodetect_dialect(active_doc, candidate_separators) {\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let min_num_lines = config ? config.get('autodetection_min_line_count') : 10;\n    if (active_doc.lineCount < min_num_lines)\n        return null;\n\n    let best_dialect = null;\n    let best_dialect_num_columns = 1;\n    for (let i = 0; i < candidate_separators.length; i++) {\n        let dialect_id = map_separator_to_language_id(candidate_separators[i]);\n        if (!dialect_id)\n            continue;\n        let [delim, policy] = dialect_map[dialect_id];\n        let cur_dialect_num_columns = get_num_columns_if_delimited(active_doc, delim, policy, best_dialect_num_columns + 1, min_num_lines);\n        if (cur_dialect_num_columns > best_dialect_num_columns) {\n            best_dialect_num_columns = cur_dialect_num_columns;\n            best_dialect = dialect_id;\n        }\n    }\n    return best_dialect;\n}\n\n\nfunction autodetect_dialect_frequency_based(active_doc, candidate_separators) {\n    let best_dialect = 'csv';\n    let best_dialect_frequency = 0;\n    let data = active_doc.getText();\n    if (!data)\n        return best_dialect;\n    for (let i = 0; i < candidate_separators.length; i++) {\n        if (candidate_separators[i] == ' ' || candidate_separators[i] == '.')\n            continue; // Whitespace and dot have advantage over other separators in this algorithm, so we just skip them.\n        let dialect_id = map_separator_to_language_id(candidate_separators[i]);\n        let frequency = 0;\n        for (let j = 0; j < 10000 && j < data.length; j++) {\n            if (data[j] == candidate_separators[i])\n                frequency += 1;\n        }\n        if (frequency > best_dialect_frequency) {\n            best_dialect = dialect_id;\n            best_dialect_frequency = frequency;\n        }\n    }\n    return best_dialect;\n}\n\n\nfunction autoenable_rainbow_csv(active_doc) {\n    if (!active_doc)\n        return;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    if (!config || !config.get('enable_separator_autodetection'))\n        return;\n    let candidate_separators = config.get('autodetect_separators');\n    var original_language_id = active_doc.languageId;\n    var file_path = active_doc.fileName;\n    if (!file_path || autodetection_stoplist.has(file_path)) {\n        return;\n    }\n    let is_default_csv = file_path.endsWith('.csv') && original_language_id == 'csv';\n    if (original_language_id != 'plaintext' && !is_default_csv)\n        return;\n    let rainbow_csv_language_id = autodetect_dialect(active_doc, candidate_separators);\n    if (!rainbow_csv_language_id && is_default_csv) {\n        // Smart autodetection method has failed, but we need to choose a separator because this is a csv file. Let's just find the most popular one.\n        rainbow_csv_language_id = autodetect_dialect_frequency_based(active_doc, candidate_separators);\n    }\n    if (!rainbow_csv_language_id || rainbow_csv_language_id == original_language_id)\n        return;\n    try_change_document_language(active_doc, rainbow_csv_language_id, false, (doc) => {\n        original_language_ids.set(file_path, original_language_id);\n        csv_lint(doc, false);\n        refresh_status_bar_buttons(doc);\n    });\n}\n\n\nfunction handle_doc_edit(change_event) {\n    if (!change_event)\n        return;\n    if (doc_edit_subscription) {\n        doc_edit_subscription.dispose();\n        doc_edit_subscription = null;\n    }\n    let active_doc = change_event.document;\n    if (!active_doc)\n        return;\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    let candidate_separators = config.get('autodetect_separators');\n    let rainbow_csv_language_id = autodetect_dialect(active_doc, candidate_separators);\n    if (!rainbow_csv_language_id)\n        return;\n    try_change_document_language(active_doc, rainbow_csv_language_id, false, (doc) => {\n        csv_lint(doc, false);\n        refresh_status_bar_buttons(doc);\n    });\n}\n\n\nfunction register_csv_copy_paste(active_doc) {\n    const config = vscode.workspace.getConfiguration('rainbow_csv');\n    if (!config || !config.get('enable_separator_autodetection'))\n        return;\n    if (!active_doc || doc_edit_subscription)\n        return;\n    if (!active_doc.isUntitled && active_doc.lineCount != 0)\n        return;\n    doc_edit_subscription = vscode.workspace.onDidChangeTextDocument(handle_doc_edit);\n    return;\n}\n\n\nfunction handle_editor_switch(editor) {\n    let active_doc = get_active_doc(editor);\n    csv_lint(active_doc, false);\n    refresh_status_bar_buttons(active_doc);\n}\n\n\nfunction handle_doc_open(active_doc) {\n    autoenable_rainbow_csv(active_doc);\n    register_csv_copy_paste(active_doc);\n    csv_lint(active_doc, false);\n    refresh_status_bar_buttons(active_doc);\n}\n\n\nfunction quote_field(field, delim) {\n    if (field.indexOf('\"') != -1 || field.indexOf(delim) != -1) {\n        return '\"' + field.replace(/\"/g, '\"\"') + '\"';\n    }\n    return field;\n}\n\n\nfunction quoted_join(fields, delim) {\n    var quoted_fields = fields.map(function(val) { return quote_field(val, delim); });\n    return quoted_fields.join(delim);\n}\n\n\nfunction make_preview(uri, preview_mode) {\n    if (is_web_ext) {\n        show_single_line_error('This command is currently unavailable in web mode.');\n        return;\n    }\n    var file_path = uri.fsPath;\n    if (!file_path || !fs.existsSync(file_path)) {\n        vscode.window.showErrorMessage('Invalid file');\n        return;\n    }\n\n    var size_limit = 1024000; // ~1MB\n    var file_size_in_bytes = fs.statSync(file_path)['size'];\n    if (file_size_in_bytes <= size_limit) {\n        vscode.window.showWarningMessage('Rainbow CSV: The file is not big enough, showing the full file instead. Use this preview for files larger than 1MB');\n        vscode.workspace.openTextDocument(file_path).then(doc => vscode.window.showTextDocument(doc));\n        return;\n    }\n\n    let file_basename = path.basename(file_path);\n    const out_path = path.join(os.tmpdir(), `.rb_csv_preview.${preview_mode}.${file_basename}`);\n\n    fs.open(file_path, 'r', (err, fd) => {\n        if (err) {\n            console.log(err.message);\n            vscode.window.showErrorMessage('Unable to preview file');\n            return;\n        }\n\n        var buffer = Buffer.alloc(size_limit);\n        let read_begin_pos = preview_mode == 'head' ? 0 : Math.max(file_size_in_bytes - size_limit, 0);\n        fs.read(fd, buffer, 0, size_limit, read_begin_pos, function(err, _num) {\n            if (err) {\n                console.log(err.message);\n                vscode.window.showErrorMessage('Unable to preview file');\n                return;\n            }\n\n            const buffer_str = buffer.toString();\n            // TODO handle old mac '\\r' line endings - still used by Mac version of Excel.\n            let content = null;\n            if (preview_mode == 'head') {\n                content = buffer_str.substr(0, buffer_str.lastIndexOf(buffer_str.includes('\\r\\n') ? '\\r\\n' : '\\n'));\n            } else {\n                content = buffer_str.substr(buffer_str.indexOf('\\n') + 1);\n            }\n            fs.writeFileSync(out_path, content);\n            vscode.workspace.openTextDocument(out_path).then(doc => vscode.window.showTextDocument(doc));\n        });\n    });\n}\n\n\nfunction register_csv_hover_info_provider(language_id, context) {\n    let hover_provider = vscode.languages.registerHoverProvider(language_id, {\n        provideHover(document, position, token) {\n            return make_hover(document, position, language_id, token);\n        }\n    });\n    context.subscriptions.push(hover_provider);\n}\n\n\nfunction activate(context) {\n    global_state = context.globalState;\n\n    if (is_web_ext) {\n        let rbql_client_uri = vscode.Uri.joinPath(context.extensionUri, 'rbql_client.html')\n        vscode.workspace.fs.readFile(rbql_client_uri).then((bytes) => { \n            // Using TextDecoder because it should work fine in web extension.\n            client_html_template_web = new TextDecoder().decode(bytes); \n        });\n    }\n\n    for (let local_path in absolute_path_map) {\n        if (absolute_path_map.hasOwnProperty(local_path)) {\n            if (is_web_ext) {\n                absolute_path_map[local_path] = vscode.Uri.joinPath(context.extensionUri, local_path);\n            } else {\n                absolute_path_map[local_path] = context.asAbsolutePath(local_path);\n            }\n        }\n    }\n\n    for (let language_id in dialect_map) {\n        if (dialect_map.hasOwnProperty(language_id)) {\n            register_csv_hover_info_provider(language_id, context);\n        }\n    }\n\n    var lint_cmd = vscode.commands.registerCommand('rainbow-csv.CSVLint', csv_lint_cmd); // WEB_TESTED\n    var rbql_cmd = vscode.commands.registerCommand('rainbow-csv.RBQL', edit_rbql); // WEB_DISABLED\n    var set_header_line_cmd = vscode.commands.registerCommand('rainbow-csv.SetHeaderLine', set_header_line); // WEB_TESTED\n    var edit_column_names_cmd = vscode.commands.registerCommand('rainbow-csv.SetVirtualHeader', edit_column_names); // WEB_TESTED\n    var set_join_table_name_cmd = vscode.commands.registerCommand('rainbow-csv.SetJoinTableName', set_join_table_name); // WEB_DISABLED\n    var column_edit_before_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditBefore', function() { column_edit('ce_before'); }); // WEB_DISABLED\n    var column_edit_after_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditAfter', function() { column_edit('ce_after'); }); // WEB_DISABLED\n    var column_edit_select_cmd = vscode.commands.registerCommand('rainbow-csv.ColumnEditSelect', function() { column_edit('ce_select'); }); // WEB_DISABLED\n    var set_separator_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparator', set_rainbow_separator); // WEB_TESTED\n    var rainbow_off_cmd = vscode.commands.registerCommand('rainbow-csv.RainbowSeparatorOff', restore_original_language); //WEB_TESTED\n    var sample_head_cmd = vscode.commands.registerCommand('rainbow-csv.SampleHead', uri => make_preview(uri, 'head')); // WEB_DISABLED\n    var sample_tail_cmd = vscode.commands.registerCommand('rainbow-csv.SampleTail', uri => make_preview(uri, 'tail')); // WEB_DISABLED\n    var align_cmd = vscode.commands.registerTextEditorCommand('rainbow-csv.Align', align_table); // WEB_TESTED\n    var shrink_cmd = vscode.commands.registerTextEditorCommand('rainbow-csv.Shrink', shrink_table); // WEB_TESTED\n    var copy_back_cmd = vscode.commands.registerCommand('rainbow-csv.CopyBack', copy_back); // WEB_DISABLED\n    var test_mode_cmd = vscode.commands.registerCommand('rainbow-csv.SetIntegrationTestMode', read_integration_test_config); // WEB_DISABLED\n\n    var doc_open_event = vscode.workspace.onDidOpenTextDocument(handle_doc_open);\n    var switch_event = vscode.window.onDidChangeActiveTextEditor(handle_editor_switch);\n\n\n    context.subscriptions.push(lint_cmd);\n    context.subscriptions.push(rbql_cmd);\n    context.subscriptions.push(edit_column_names_cmd);\n    context.subscriptions.push(column_edit_before_cmd);\n    context.subscriptions.push(column_edit_after_cmd);\n    context.subscriptions.push(column_edit_select_cmd);\n    context.subscriptions.push(doc_open_event);\n    context.subscriptions.push(switch_event);\n    context.subscriptions.push(set_separator_cmd);\n    context.subscriptions.push(rainbow_off_cmd);\n    context.subscriptions.push(sample_head_cmd);\n    context.subscriptions.push(sample_tail_cmd);\n    context.subscriptions.push(set_join_table_name_cmd);\n    context.subscriptions.push(align_cmd);\n    context.subscriptions.push(shrink_cmd);\n    context.subscriptions.push(copy_back_cmd);\n    context.subscriptions.push(set_header_line_cmd);\n    context.subscriptions.push(test_mode_cmd);\n\n    setTimeout(function() {\n        // Need this because \"onDidOpenTextDocument()\" doesn't get called for the first open document.\n        // Another issue is when dev debug logging mode is enabled, the first document would be \"Log\" because it is printing something and gets VSCode focus.\n        var active_doc = get_active_doc();\n        handle_doc_open(active_doc);\n    }, 1000);\n\n}\n\n\n\n\nfunction deactivate() {\n    // This method is called when extension is deactivated.\n}\n\n\nexports.activate = activate;\nexports.deactivate = deactivate;\n\n// Export some functions for integration tests:\nexports.csv_lint = csv_lint; // TODO do not expose the method, use command instead\n"],"names":["os","fs","path","rbql","vscode","csv_utils","try_read_index","index_path","content","readFileSync","e","lines","split","records","i","length","record","push","get_header_line","document","comment_prefix","num_lines","lineCount","lnum","line_text","lineAt","text","startsWith","RbqlIOHandlingError","Error","VSCodeRecordIterator","RBQLInputIterator","constructor","delim","policy","has_header","table_name","variable_prefix","super","this","NR","NL","fields_info","Object","first_defective_line","first_record","get_first_record","stop","header_line","smart_split","async","query_text","variable_map","parse_basic_variables","parse_array_variables","parse_attribute_variables","parse_dictionary_variables","get_line_rfc","get_line_simple","line","do_get_record","warning","handle_exception","num_fields","hasOwnProperty","get_warnings","result","keys","inconsistent_records_info","entries","key","record_id","sort","a","b","assert","record_1","num_fields_1","record_2","num_fields_2","warn_msg","make_inconsistent_num_fields_warning","VSCodeWriter","RBQLOutputWriter","vscode_language_name","header_len","null_in_output","delim_in_simple_output","output_lines","polymorphic_join","simple_join","quoted_join","quoted_join_rfc","mono_join","set_header","header","write","fields","map","v","quote_field","String","join","rfc_quote_field","res","indexOf","normalize_fields","out_fields","Array","isArray","sub_array_delim","output_doc_cfg","language","workspace","openTextDocument","then","doc","window","showTextDocument","module","exports","write_table_name","table_path","home_dir","homedir","record_key","new_record","update_records","splice","writeFileSync","write_index","read_table_path","existsSync","read_header","encoding","process_header_line_callback","input_reader","createInterface","input","createReadStream","closed","on","close","query_vscode","input_document","input_delim","input_policy","output_delim","output_policy","output_vscode_language_name","output_warnings","with_headers","input_iterator","output_writer","query","field_rgx","RegExp","field_rgx_external_whitespaces","extract_next_field","src","dlm","preserve_quotes_and_whitespaces","allow_external_whitespaces","cidx","src_cur","substring","match_obj","exec","match_end","replace","uidx","field","split_quoted_str","extraction_report","charAt","unquote_field","split_whitespace_separated_str","preserve_whitespaces","rgxp","slice","unquote_fields","split_lines","RbqlParsingError","RbqlRuntimeError","AssertionError","InternalBadFieldError","bad_idx","params","condition","message","replace_all","search","replacement","RBQLContext","user_init_code","writer","unnest_list","top_count","like_regex_cache","Map","sort_key_expression","aggregation_stage","aggregation_key_expression","functional_aggregators","join_map_impl","join_map","lhs_join_var_expression","where_expression","select_expression","update_expressions","variables_init_code","query_context","wrong_aggregation_usage_error","RBQL_VERSION","check_if_brackets_match","opening_bracket","closing_bracket","parse_root_bracket_level_text_spans","text_spans","last_pos","bracket_stack","cur_char","pop","span","trim","unquote_string","quoted_str","column_info_from_text_span","text_span","string_literals","rbql_star_marker","simple_var_match","attribute_match","subscript_int_match","subscript_str_match","column_index","column_name","is_star","match","parseInt","replaced_string_literal_id","unquoted_column_name","adhoc_parse_select_expression_to_column_infos","ts","stable_compare","safe_get","idx","safe_join_get","safe_set","value","regexp_escape","like_to_regex","pattern","p","converted","like","matcher","get","undefined","set","test","LIKE","RBQLAggregationToken","marker_id","toString","UnnestMarker","UNNEST","vals","unnest","Unnest","UNFOLD","parse_number","val","Number","isNaN","MinAggregator","stats","increment","cur_aggr","Math","min","get_final","MaxAggregator","max","SumAggregator","AvgAggregator","cur_sum","cur_cnt","VarianceAggregator","cur_sum_sq","avg_val","MedianAggregator","m","floor","CountAggregator","ArrayAggAggregator","post_proc","ConstGroupVerifier","output_index","const_values","old_value","init_aggregator","generator_name","MIN","Min","MAX","Max","COUNT","count","Count","SUM","sum","Sum","AVG","avg","Avg","VARIANCE","variance","Variance","MEDIAN","median","Median","ARRAY_AGG","array_agg","FOLD","add_to_set","dst_set","len_before","size","add","TopWriter","subwriter","NW","finish","UniqWriter","seen","Set","JSON","stringify","UniqCountWriter","old_val","unshift","SortedWriter","reverse_sort","unsorted_entries","stable_entry","reverse","entry","AggregateWriter","aggregators","aggregation_keys","all_keys","from","ag","InnerJoiner","get_rhs","lhs_key","get_join_records","LeftJoiner","null_record","max_record_len","fill","StrictLeftJoiner","select_except","except_fields","select_simple","sort_key","sort_entry","concat","select_aggregated","transparent_values","num_aggregators_found","trans_value","select_unnested","folded_fields","unnest_pos","findIndex","PROCESS_SELECT_COMMON","PROCESS_SELECT_SIMPLE","PROCESS_SELECT_JOIN","PROCESS_UPDATE_JOIN","PROCESS_UPDATE_SIMPLE","MAIN_LOOP_BODY","embed_expression","parent_code","child_placeholder","child_expression","embed_code","child_code","parent_lines","child_lines","pos","placeholder_indentation","l","generate_main_loop_code","is_select_query","is_join_query","js_code","compile_and_run","main_loop_body","main_loop_promise","eval","SyntaxError","lower_case_query","toLowerCase","GROUP_BY","UPDATE","SELECT","JOIN","INNER_JOIN","LEFT_JOIN","LEFT_OUTER_JOIN","STRICT_LEFT_JOIN","ORDER_BY","WHERE","LIMIT","EXCEPT","WITH","get_ambiguous_error_msg","variable_name","get_all_matches","regexp","str_strip","strip_comments","cline","combine_string_literals","backend_expression","prefix","dst_variables_map","matches","field_num","initialize","index","js_string_escape_column_name","quote_char","query_probably_has_dictionary_variable","continuous_name_segments","continuous_segment","column_names","dict_test_rgx","escaped_column_name","column_names_source","column_names_from_query","zero_based_idx","map_variables_directly","ensure_no_ambiguous_variables","input_column_names","join_column_names","join_column_names_set","has","parse_join_expression","invalid_join_syntax_error","table_id","substr","variable_pairs","pair_rgx","and_rgx","resolve_join_variables","input_variables_map","join_variables_map","lhs_variables","rhs_indices","valid_join_syntax_msg","variable_pair","join_var_1","join_var_2","lhs_key_index","rhs_key_index","generate_common_init_code","base_var","attr_var","generate_init_statements","variables_map","indent","code_lines","simple_var_name_rgx","var_info","variable_declaration_keyword","replace_star_count","aggregate_expression","replace_star_vars","rbql_expression","replacement_expression","replace_star_vars_for_header_parsing","translate_update_expression","update_expression","first_assignment_error","assignment_looking_rgx","dst_var_name","var_index","current_indent","translate_select_expression","expression_without_stars","translated","translated_for_header","separate_string_literals","rgx","format_parts","idx_before","literal_id","string_literal","start_index","lastIndex","format_expression","locate_statements","statement_groups","ig","is","statement","match_str","separate_actions","with_match","ordered_statements","statement_start","span_start","span_end","statement_params","new_span","find_top","rb_actions","select_action","translate_except_expression","except_expression","input_header","skip_vars","skip_indices","var_name","HashJoinMap","record_iterator","key_indices","hash_map","nr","key_index","polymorphic_get_key","get_single_key","get_multi_key","ki","get_record","nf","key_records","cleanup_query","filter","remove_redundant_table_name","select_output_header","join_header","query_column_infos","output_header","qci","handle_query_modifier","RBQLTableRegistry","get_iterator_by_table_id","TableIterator","table","normalize_column_names","stopped","TableWriter","external_table","SingleTableRegistry","shallow_parse_input_query","join_tables_registry","get_variables_map","rhs_table_id","join_record_iterator","get_header","sql_join_type","build","repeat","select_expression_for_ast","query_table","input_table","output_table","join_table","output_column_names","exception_to_error_info","exceptions_type_map","error_type","name","version","util","utf_decoding_error","is_ascii","str","read_user_init_code","rbql_init_source_path","find_table_path","main_table_dir","filepath","candidate_path","isAbsolute","name_record","get_index_record","RecordQueue","push_stack","pull_stack","enqueue","dequeue","CSVRecordIterator","stream","csv_path","first_record_should_be_emitted","header_preread_complete","decoder","TextDecoder","fatal","input_exhausted","started","utf8_bom_removed","rfc_line_buffer","partially_decoded_line","partially_decoded_line_ends_with_cr","resolve_current_record","reject_current_record","current_exception","produced_records_queue","process_line_polymorphic","process_partial_rfc_record_line","process_record_line","modifier","exception","reject","pause","preread_first_record","try_resolve_next_record","resolve","start","isPaused","resume","parent_iterator","current_record_promise","Promise","num_records","match_list","has_unbalanced_double_quote","multiline_row","process_line","clean_line","assumed_source_encoding","charCodeAt","remove_utf8_bom","process_data_stream_chunk","data_chunk","decoded_string","decode","TypeError","first_line_index","process_data_bulk","control_buffer","Buffer","compare","process_data_stream_end","last_line","destroy","readFile","err","CSVWriter","close_stream_on_finish","line_separator","setDefaultEncoding","_write_all","output_stream","output_encoding","end","setTimeout","FileSystemCSVRegistry","input_file_dir","options","bulk_input_path","basename","interpret_named_csv_format","format_name","query_csv","input_path","output_path","csv_encoding","input_stream","process","stdin","close_output_on_finish","stdout","createWriteStream","default_init_source_path","dirname","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","child_process","client_html_template_web","is_web_ext","rbql_csv","rainbow_utils","integration_test_config","ll_rbql_csv","ll_rainbow_utils","dialect_map","absolute_path_map","read_integration_test_config","show_single_line_error","config_path","data","flag","parse","lint_results","aligned_files","autodetection_stoplist","original_language_ids","result_set_parent_map","lint_status_bar_button","rbql_status_bar_button","align_shrink_button","rainbow_off_status_bar_button","copy_back_button","last_statusbar_doc","preview_window_size","rbql_context","last_rbql_queries","client_html_template","global_state","preview_panel","doc_edit_subscription","scratch_buf_marker","map_separator_to_language_id","separator","language_id","get_from_global_state","default_value","save_to_global_state","update","get_rfc_record_text","record_start","record_end","sample_preview_records_from_context","dst_message","requested_start_record","preview_records","enable_rfc_newlines","requested_end_record","dst_record_map","record_begin","arr","populate_optimistic_rfc_csv_record_map","rfc_record_map","record_text","cur_record","preview_sampling_error","r","c","start_record_zero_based","make_header_key","file_path","make_rfc_policy_key","make_with_headers_key","get_header_from_document","config","getConfiguration","fileName","raw_header","get_field_by_line_position","query_pos","col_num","cpos","get_active_editor","active_window","activeTextEditor","get_active_doc","active_editor","hide_status_bar_buttons","all_buttons","hide","refresh_status_bar_buttons","active_doc","endsWith","languageId","lint_cache_key","lint_report","createStatusBarItem","StatusBarAlignment","Left","color","tooltip","command","show","show_lint_status_bar_button","show_align_shrink_button","languages","setTextDocumentLanguage","parent_table_path","parent_basename","show_rbql_copy_to_source_button","csv_lint","is_manual_op","detect_trailing_spaces","first_trailing_space_line","split_result","produce_lint_report","csv_lint_cmd","error_msg","showErrorMessage","try_change_document_language","callback_func","error","handle_rbql_result_file","text_doc","warnings","_editor","console","log","showWarningMessage","show_warnings","_reason","run_command","cmd","args","close_and_error_guard","spawn","stderr","code","handle_command_result","src_table_path","dst_table_path","error_code","webview_report_handler","json_report","report","file_path_to_query_key","get_dialect","set_header_line","dialect","selection","set_rainbow_separator","original_language_id","character","restore_original_language","delete","set_join_table_name","showInputBox","edit_column_names","old_header_str","input_box_props","raw_new_header","new_header","reason","column_edit","edit_mode","position","active","cnum","quoting_warning","selections","char_pos_before","char_pos_after","position_before","Position","position_after","Selection","shrink_table","edit_builder","shrinked_doc_text","first_failed_line","result_lines","has_edit","adjusted","shrink_columns","invalid_range","Range","full_range","validateRange","align_table","column_sizes","calc_column_sizes","aligned_doc_text","delta_len","align_columns","copy_back","result_doc","query_result_doc","getText","edit","do_copy_back","handle_rbql_client_message","webview","message_type","init_msg","path_key","input_document_path","history_list","rbql_backend","rbql_query","postMessage","process_header_line","protocol_message","navig_direction","backend_language","output_dialect","old_index","update_query_history","tmp_dir","tmpdir","output_file_name","orig_extension","extname","delim_ext_map","dst_extension","get_dst_table_name","handle_worker_success","catch","cmd_safe_query","run_rbql_query","report_msg","udf_file_path","default_content","edit_rbql","orig_uri","uri","scheme","isDirty","rnd_suffix","random","with_headers_by_default","createWebviewPanel","ViewColumn","Active","enableScripts","client_html","paths_list","local_path","adjusted_webview_url","asWebviewUri","Uri","file","adjust_webview_paths","html","onDidReceiveMessage","get_num_columns_if_delimited","min_num_columns","min_num_lines","num_lines_checked","comment_prefix_for_autodetection","autodetect_dialect","candidate_separators","best_dialect","best_dialect_num_columns","dialect_id","cur_dialect_num_columns","handle_doc_edit","change_event","dispose","rainbow_csv_language_id","handle_editor_switch","editor","handle_doc_open","is_default_csv","best_dialect_frequency","frequency","j","autodetect_dialect_frequency_based","autoenable_rainbow_csv","isUntitled","onDidChangeTextDocument","register_csv_copy_paste","make_preview","preview_mode","fsPath","size_limit","file_size_in_bytes","statSync","file_basename","out_path","open","fd","buffer","alloc","read_begin_pos","read","_num","buffer_str","lastIndexOf","includes","register_csv_hover_info_provider","context","hover_provider","registerHoverProvider","provideHover","token","cancellation_token","hover_text","enable_tooltip_column_names","enable_tooltip_warnings","max_label_len","column_label","short_column_label","make_hover_text","isCancellationRequested","mds","MarkdownString","appendCodeblock","Hover","make_hover","subscriptions","activate","globalState","rbql_client_uri","joinPath","extensionUri","bytes","asAbsolutePath","lint_cmd","commands","registerCommand","rbql_cmd","set_header_line_cmd","edit_column_names_cmd","set_join_table_name_cmd","column_edit_before_cmd","column_edit_after_cmd","column_edit_select_cmd","set_separator_cmd","rainbow_off_cmd","sample_head_cmd","sample_tail_cmd","align_cmd","registerTextEditorCommand","shrink_cmd","copy_back_cmd","test_mode_cmd","doc_open_event","onDidOpenTextDocument","switch_event","onDidChangeActiveTextEditor","deactivate"],"sourceRoot":""}