export default class Formatter {
    argumentCheck: any;
    bladeBraces: any;
    bladeComments: any;
    bladeDirectives: any;
    classes: any;
    currentIndentLevel: any;
    diffs: any;
    indentCharacter: any;
    indentSize: any;
    inlineDirectives: any;
    conditions: any;
    inlinePhpDirectives: any;
    isInsideCommentBlock: any;
    oniguruma: any;
    options: any;
    rawBladeBraces: any;
    ignoredLines: any;
    curlyBracesWithJSs: any;
    rawBlocks: any;
    rawPhpTags: any;
    rawPropsBlocks: any;
    result: any;
    scripts: any;
    shouldBeIndent: any;
    stack: any;
    templatingStrings: any;
    vsctm: any;
    wrapAttributes: any;
    wrapLineLength: any;
    constructor(options: any);
    formatContent(content: any): Promise<any>;
    formatAsHtml(data: any): Promise<any>;
    preserveIgnoredLines(content: any): Promise<any>;
    preserveCurlyBraceForJS(content: any): Promise<any>;
    preservePhpBlock(content: any): Promise<any>;
    preservePropsBlock(content: any): Promise<any>;
    preserveRawPhpBlock(content: any): Promise<any>;
    preserveInlineDirective(content: string): string;
    preserveInlinePhpDirective(content: any): Promise<any>;
    preserveBladeDirectivesInScripts(content: any): any;
    /**
     * Recursively insert line break before and after directives
     * @param content string
     * @returns
     */
    breakLineBeforeAndAfterDirective(content: string): string;
    preserveBladeComment(content: any): Promise<any>;
    preserveBladeBrace(content: any): Promise<any>;
    preserveRawBladeBrace(content: any): Promise<any>;
    preserveConditions(content: any): Promise<any>;
    preserveRawPhpTags(content: any): Promise<any>;
    preserveScripts(content: any): Promise<any>;
    preserveClass(content: any): Promise<any>;
    storeIgnoredLines(value: any): any;
    storeCurlyBraceForJS(value: any): any;
    storeRawBlock(value: any): any;
    storeInlineDirective(value: any): any;
    storeConditions(value: any): any;
    storeInlinePhpDirective(value: any): any;
    storeRawPropsBlock(value: any): any;
    storeBladeDirective(value: any): any;
    storeBladeComment(value: any): any;
    storeBladeBrace(value: any, length: any): any;
    storeRawBladeBrace(value: any): any;
    storeRawPhpTags(value: any): any;
    storeScripts(value: any): any;
    storeClass(value: any): any;
    storeTemplatingString(value: any): any;
    getIgnoredLinePlaceholder(replace: any): any;
    getCurlyBraceForJSPlaceholder(replace: any): any;
    getRawPlaceholder(replace: any): any;
    getInlinePlaceholder(replace: any, length?: number): any;
    getConditionPlaceholder(replace: any): any;
    getInlinePhpPlaceholder(replace: any): any;
    getRawPropsPlaceholder(replace: any): any;
    getBladeDirectivePlaceholder(replace: any): any;
    getBladeCommentPlaceholder(replace: any): any;
    getBladeBracePlaceholder(replace: any, length?: number): any;
    getRawBladeBracePlaceholder(replace: any): any;
    getRawPhpTagPlaceholder(replace: any): any;
    getScriptPlaceholder(replace: any): any;
    getClassPlaceholder(replace: any, length: any): any;
    getTemplatingStringPlaceholder(replace: any): any;
    restoreIgnoredLines(content: any): any;
    restoreCurlyBraceForJS(content: any): any;
    restorePhpBlock(content: any): Promise<any>;
    restoreRawPhpBlock(content: any): Promise<any>;
    restoreRawPropsBlock(content: any): Promise<any>;
    isInline(content: any): boolean;
    isMultilineStatement(rawBlock: any): boolean;
    indentRawBlock(spaces: any, content: any): any;
    indentBladeDirectiveBlock(prefix: any, content: any): any;
    indentScriptBlock(prefix: any, content: any): any;
    indentRawPhpBlock(prefix: any, content: any): any;
    restoreBladeDirectivesInScripts(content: any): any;
    formatPreservedBladeDirectives(directives: any): Promise<any[]>;
    restoreBladeComment(content: any): Promise<any>;
    restoreBladeBrace(content: any): Promise<any>;
    restoreRawBladeBrace(content: any): Promise<any>;
    restoreInlineDirective(content: any): Promise<any>;
    restoreConditions(content: any): Promise<any>;
    restoreInlinePhpDirective(content: any): Promise<any>;
    restoreRawPhpTags(content: any): Promise<any>;
    restoreScripts(content: any): Promise<any>;
    restoreClass(content: any): any;
    restoreTemplatingString(content: any): any;
    formatAsBlade(content: any): Promise<any>;
    formatTokenizedLines(splitedLines: any, tokenizedLines: any): any;
    processLine(tokenizeLineResult: any, originalLine: any): void;
    processKeyword(token: any): void;
    processToken(tokenStruct: any, token: any): void;
    processTokenizeResult(tokenizeLineResult: any, originalLine: any): void;
    insertFormattedLineToResult(originalLine: any): void;
}
