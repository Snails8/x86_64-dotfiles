export declare class BladeFormatter {
	diffs: any;
	errors: any;
	formattedFiles: any;
	ignoreFile: any;
	options: any;
	outputs: any;
	paths: any;
	targetFiles: any;
	fulFillFiles: any;
	static targetFiles: any;
	constructor(options?: {}, paths?: any);
	format(content: any, opts?: {}): Promise<any>;
	formatFromCLI(): Promise<void>;
	readIgnoreFile(): Promise<void>;
	processPaths(): Promise<void>;
	processPath(path: any): Promise<void>;
	static globFiles(path: any): Promise<unknown>;
	filterFiles(paths: any): Promise<any>;
	static fulFillFiles(paths: any): Promise<any>;
	formatFiles(paths: any): Promise<void>;
	formatFile(path: any): Promise<void>;
	checkFormatted(path: any, formatted: any): Promise<any>;
	printFormattedOutput(path: any, formatted: any): void;
	writeToFile(path: any, content: any): void;
	handleError(path: any, error: any): void;
	printPreamble(): void;
	printResults(): Promise<void>;
	printDescription(): void;
	printFormattedFiles(): void;
	printDifferences(): void;
	printErrors(): void;
}
export declare class Formatter {
	argumentCheck: any;
	bladeBraces: any;
	bladeComments: any;
	bladeDirectives: any;
	classes: any;
	currentIndentLevel: any;
	diffs: any;
	indentCharacter: any;
	indentSize: any;
	inlineDirectives: any;
	inlinePhpDirectives: any;
	isInsideCommentBlock: any;
	oniguruma: any;
	options: any;
	rawBladeBraces: any;
	rawBlocks: any;
	rawPhpTags: any;
	rawPropsBlocks: any;
	result: any;
	scripts: any;
	shouldBeIndent: any;
	stack: any;
	templatingStrings: any;
	vsctm: any;
	wrapAttributes: any;
	wrapLineLength: any;
	constructor(options: any);
	formatContent(content: any): Promise<any>;
	formatAsHtml(data: any): Promise<string>;
	preservePhpBlock(content: any): Promise<string>;
	preservePropsBlock(content: any): Promise<string>;
	preserveRawPhpBlock(content: any): Promise<string>;
	preserveInlineDirective(content: any): Promise<string>;
	preserveInlinePhpDirective(content: any): Promise<string>;
	preserveBladeDirectivesInScripts(content: any): string;
	preserveBladeComment(content: any): Promise<string>;
	preserveBladeBrace(content: any): Promise<string>;
	preserveRawBladeBrace(content: any): Promise<string>;
	preserveRawPhpTags(content: any): Promise<string>;
	preserveScripts(content: any): Promise<string>;
	preserveClass(content: any): Promise<string>;
	storeRawBlock(value: any): string;
	storeInlineDirective(value: any): string;
	storeInlinePhpDirective(value: any): string;
	storeRawPropsBlock(value: any): string;
	storeBladeDirective(value: any): string;
	storeBladeComment(value: any): string;
	storeBladeBrace(value: any, length: any): string;
	storeRawBladeBrace(value: any): string;
	storeRawPhpTags(value: any): string;
	storeScripts(value: any): string;
	storeClass(value: any): string;
	storeTemplatingString(value: any): string;
	getRawPlaceholder(replace: any): string;
	getInlinePlaceholder(replace: any): string;
	getInlinePhpPlaceholder(replace: any): string;
	getRawPropsPlaceholder(replace: any): string;
	getBladeDirectivePlaceholder(replace: any): string;
	getBladeCommentPlaceholder(replace: any): string;
	getBladeBracePlaceholder(replace: any, length?: number): string;
	getRawBladeBracePlaceholder(replace: any): string;
	getRawPhpTagPlaceholder(replace: any): string;
	getScriptPlaceholder(replace: any): string;
	getClassPlaceholder(replace: any, length: any): string;
	getTemplatingStringPlaceholder(replace: any): string;
	restorePhpBlock(content: any): Promise<string>;
	restoreRawPhpBlock(content: any): Promise<string>;
	restoreRawPropsBlock(content: any): Promise<string>;
	isInline(content: any): boolean;
	isMultilineStatement(rawBlock: any): boolean;
	indentRawBlock(spaces: any, content: any): any;
	indentBladeDirectiveBlock(prefix: any, content: any): any;
	indentScriptBlock(prefix: any, content: any): any;
	indentRawPhpBlock(prefix: any, content: any): any;
	restoreBladeDirectivesInScripts(content: any): string;
	formatPreservedBladeDirectives(directives: any): Promise<any[]>;
	restoreBladeComment(content: any): Promise<string>;
	restoreBladeBrace(content: any): Promise<string>;
	restoreRawBladeBrace(content: any): Promise<string>;
	restoreInlineDirective(content: any): Promise<string>;
	restoreInlinePhpDirective(content: any): Promise<string>;
	restoreRawPhpTags(content: any): Promise<string>;
	restoreScripts(content: any): Promise<string>;
	restoreClass(content: any): string;
	restoreTemplatingString(content: any): string;
	formatAsBlade(content: any): Promise<any>;
	formatTokenizedLines(splitedLines: any, tokenizedLines: any): any;
	processLine(tokenizeLineResult: any, originalLine: any): void;
	processKeyword(token: any): void;
	processToken(tokenStruct: any, token: any): void;
	processTokenizeResult(tokenizeLineResult: any, originalLine: any): void;
	insertFormattedLineToResult(originalLine: any): void;
}